window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyRdfa", "modulename": "pyRdfa", "kind": "module", "doc": "<p>RDFa 1.1 parser, also referred to as a \u201cRDFa Distiller\u201d. It is\ndeployed, via a CGI front-end, on the U{W3C RDFa 1.1 Distiller page<a href=\"http://www.w3.org/2012/pyRdfa/\">http://www.w3.org/2012/pyRdfa/</a>}.</p>\n\n<p>For details on RDFa, the reader should consult the U{RDFa Core 1.1<a href=\"http://www.w3.org/TR/rdfa-core/\">http://www.w3.org/TR/rdfa-core/</a>}, U{XHTML+RDFa1.1<a href=\"http://www.w3.org/TR/2010/xhtml-rdfa\">http://www.w3.org/TR/2010/xhtml-rdfa</a>}, and the U{RDFa 1.1 Lite<a href=\"http://www.w3.org/TR/rdfa-lite/\">http://www.w3.org/TR/rdfa-lite/</a>} documents.\nThe U{RDFa 1.1 Primer<a href=\"http://www.w3.org/TR/owl2-primer/\">http://www.w3.org/TR/owl2-primer/</a>} may also prove helpful.</p>\n\n<p>This package can also be downloaded U{from GitHub<a href=\"https://github.com/RDFLib/pyrdfa3\">https://github.com/RDFLib/pyrdfa3</a>}. The\ndistribution also includes the CGI front-end and a separate utility script to be run locally.</p>\n\n<p>Note that this package is an updated version of a U{previous RDFa distiller<a href=\"http://www.w3.org/2007/08/pyRdfa\">http://www.w3.org/2007/08/pyRdfa</a>} that was developed\nfor RDFa 1.0. Although it reuses large portions of that code, it has been quite thoroughly rewritten, hence put in a completely\ndifferent project. (The version numbering has been continued, though, to avoid any kind of misunderstandings. This version has version numbers \"3.0.0\" or higher.)</p>\n\n<h1 id=\"simple-usage\">(Simple) Usage</h1>\n\n<p>From a Python file, expecting a Turtle output::\n from pyRdfa import pyRdfa\n print pyRdfa().rdf_from_source('filename')\nOther output formats are also possible. E.g., to produce RDF/XML output, one could use::\n from pyRdfa import pyRdfa\n print pyRdfa().rdf_from_source('filename', outputFormat='pretty-xml')\nIt is also possible to embed an RDFa processing. Eg, using::\n from pyRdfa import pyRdfa\n graph = pyRdfa().graph_from_source('filename')\nreturns an RDFLib.Graph object instead of a serialization thereof. See the the description of the\nL{pyRdfa class<pyRdfa.pyRdfa>} for further possible entry points details.</p>\n\n<p>There is also, as part of this module, a L{separate entry for CGI calls<processURI>}.</p>\n\n<h2 id=\"return-serialization-formats\">Return (serialization) formats</h2>\n\n<p>The package relies on RDFLib. By default, it relies therefore on the serializers coming with the local RDFLib distribution. However, there has been some issues with serializers of older RDFLib releases; also, some output formats, like JSON-LD, are not (yet) part of the standard RDFLib distribution. A companion package, called pyRdfaExtras, is part of the download, and it includes some of those extra serializers. The extra format (not part of the RDFLib core) is U{JSON-LD<a href=\"http://json-ld.org/spec/latest/json-ld-syntax/\">http://json-ld.org/spec/latest/json-ld-syntax/</a>}, whose 'key' is 'json', when used in the 'parse' method of an RDFLib graph.</p>\n\n<p>(Note in 2018: the bugs that needed pyRdfaExtras are gone with the RDFLib versions, and the json-ld serializer and parser can be U{downloaded from github<a href=\"https://github.com/RDFLib/rdflib-jsonld\">https://github.com/RDFLib/rdflib-jsonld</a>} (or installed via pip). This means that importing pyRdfaExtras is done only when running older (i.e., 2.X.X) RDFLib versions and can be safely ignored these days.)  </p>\n\n<h1 id=\"options\">Options</h1>\n\n<p>The package also implements some optional features that are not part of the RDFa recommendations. At the moment these are:</p>\n\n<ul>\n<li>possibility for plain literals to be normalized in terms of white spaces. Default: false. (The RDFa specification requires keeping the white spaces and leave applications to normalize them, if needed)</li>\n<li>inclusion of embedded RDF: Turtle content may be enclosed in a C{script} element and typed as C{text/turtle}, U{defined by the RDF Working Group<a href=\"http://www.w3.org/TR/turtle/\">http://www.w3.org/TR/turtle/</a>}. Alternatively, some XML dialects (e.g., SVG) allows the usage of RDF/XML as part of their core content to define metadata in RDF. For both of these cases pyRdfa parses these serialized RDF content and adds the resulting triples to the output Graph. Default: true.</li>\n<li>extra, built-in transformers are executed on the DOM tree prior to RDFa processing (see below). These transformers can be provided by the end user.</li>\n</ul>\n\n<p>Options are collected in an instance of the L{Options} class and may be passed to the processing functions as an extra argument. E.g., to allow the inclusion of embedded content::\n from pyRdfa.options import Options\n options = Options(embedded_rdf=True)\n print pyRdfa(options=options).rdf_from_source('filename')</p>\n\n<p>See the description of the L{Options} class for the details.</p>\n\n<h1 id=\"host-languages\">Host Languages</h1>\n\n<p>RDFa 1.1. Core is defined for generic XML; there are specific documents to describe how the generic specification is applied to\nXHTML and HTML5.</p>\n\n<p>pyRdfa makes an automatic switch among these based on the content type of the source as returned by an HTTP request. The following are the\npossible host languages:</p>\n\n<ul>\n<li>if the content type is C{text/html}, the content is HTML5</li>\n<li>if the content type is C{application/xhtml+xml} I{and} the right DTD is used, the content is XHTML1</li>\n<li>if the content type is C{application/xhtml+xml} and no or an unknown DTD is used, the content is XHTML5</li>\n<li>if the content type is C{application/svg+xml}, the content type is SVG</li>\n<li>if the content type is C{application/atom+xml}, the content type is SVG</li>\n<li>if the content type is C{application/xml} or C{application/xxx+xml} (but 'xxx' is not 'atom' or 'svg'), the content type is XML</li>\n</ul>\n\n<p>If local files are used, pyRdfa makes a guess on the content type based on the file name suffix: C{.html} is for HTML5, C{.xhtml} for XHTML1, C{.svg} for SVG, anything else is considered to be general XML. Finally, the content type may be set by the caller when initializing the L{pyRdfa class<pyRdfa.pyRdfa>}.</p>\n\n<p>Beyond the differences described in the RDFa specification, the main difference is the parser used to parse the source. In the case of HTML5, pyRdfa uses an U{HTML5 parser<a href=\"http://code.google.com/p/html5lib/\">http://code.google.com/p/html5lib/</a>}; for all other cases the simple XML parser, part of the core Python environment, is used. This may be significant in the case of erroneous sources: indeed, the HTML5 parser may do adjustments on\nthe DOM tree before handing it over to the distiller. Furthermore, SVG is also recognized as a type that allows embedded RDF in the form of RDF/XML.</p>\n\n<p>See the variables in the L{host} module if a new host language is added to the system. The current host language information is available for transformers via the option argument, too, and can be used to control the effect of the transformer.</p>\n\n<h1 id=\"vocabularies\">Vocabularies</h1>\n\n<p>RDFa 1.1 has the notion of vocabulary files (using the C{@vocab} attribute) that may be used to expand the generated RDF graph. Expansion is based on some very simply RDF Schema and OWL statements on sub-properties and sub-classes, and equivalences.</p>\n\n<p>pyRdfa implements this feature, although it does not do this by default. The extra C{vocab_expansion} parameter should be used for this extra step, for example::\n from pyRdfa.options import Options\n options = Options(vocab_expansion=True)\n print pyRdfa(options=options).rdf_from_source('filename')</p>\n\n<p>The triples in the vocabulary files themselves (i.e., the small ontology in RDF Schema and OWL) are removed from the result, leaving the inferred property and type relationships only (additionally to the \u201ccore\u201d RDF content).</p>\n\n<h2 id=\"vocabulary-caching\">Vocabulary caching</h2>\n\n<p>By default, pyRdfa uses a caching mechanism instead of fetching the vocabulary files each time their URI is met as a C{@vocab} attribute value. (This behavior can be switched off setting the C{vocab_cache} option to false.)</p>\n\n<p>Caching happens in a file system directory. The directory itself is determined by the platform the tool is used on, namely:</p>\n\n<ul>\n<li>On Windows, it is the C{pyRdfa-cache} subdirectory of the C{%APPDATA%} environment variable</li>\n<li>On MacOS, it is the C{~/Library/Application Support/pyRdfa-cache}</li>\n<li>Otherwise, it is the C{~/.pyRdfa-cache}</li>\n</ul>\n\n<p>This automatic choice can be overridden by the C{PyRdfaCacheDir} environment variable.</p>\n\n<p>Caching can be set to be read-only, i.e., the setup might generate the cache files off-line instead of letting the tool writing its own cache when operating, e.g., as a service on the Web. This can be achieved by making the cache directory read only.</p>\n\n<p>If the directories are neither readable nor writable, the vocabulary files are retrieved via HTTP every time they are hit. This may slow down processing, it is advised to avoid such a setup for the package.</p>\n\n<p>The cache includes a separate index file and a file for each vocabulary file. Cache control is based upon the C{EXPIRES} header of a vocabulary file\u2019s HTTP return header: when first seen, this data is stored in the index file and controls whether the cache has to be renewed or not. If the HTTP return header does not have this entry, the date is artificially set ot the current date plus one day.</p>\n\n<p>(The cache files themselves are dumped and loaded using U{Python\u2019s built in cPickle package<a href=\"http://docs.python.org/release/2.7/library/pickle.html#module-cPickle\">http://docs.python.org/release/2.7/library/pickle.html#module-cPickle</a>}. These are binary files. Care should be taken if they are managed by CVS: they must be declared as binary files when adding them to the repository.)</p>\n\n<h1 id=\"rdfa-11-vs-rdfa-10\">RDFa 1.1 vs. RDFa 1.0</h1>\n\n<p>Unfortunately, RDFa 1.1 is I{not} fully backward compatible with RDFa 1.0, meaning that, in a few cases, the triples generated from an RDFa 1.1 source are not the same as for RDFa 1.0. (See the separate  U{section in the RDFa 1.1 specification<a href=\"http://www.w3.org/TR/rdfa-core/#major-differences-with-rdfa-syntax-1.0\">http://www.w3.org/TR/rdfa-core/#major-differences-with-rdfa-syntax-1.0</a>} for some further details.)</p>\n\n<p>This distiller\u2019s default behavior is RDFa 1.1. However, if the source includes, in the top element of the file (e.g., the C{html} element) a C{@version} attribute whose value contains the C{RDFa 1.0} string, then the distiller switches to a RDFa 1.0 mode. (Although the C{@version} attribute is not required in RDFa 1.0, it is fairly commonly used.) Similarly, if the RDFa 1.0 DTD is used in the XHTML source, it will be taken into account (a very frequent setup is that an XHTML file is defined with that DTD and is served as text/html; pyRdfa will consider that file as XHTML5, i.e., parse it with the HTML5 parser, but interpret the RDFa attributes under the RDFa 1.0 rules).</p>\n\n<h1 id=\"transformers\">Transformers</h1>\n\n<p>The package uses the concept of 'transformers': the parsed DOM tree is possibly\ntransformed I{before} performing the real RDFa processing. This transformer structure makes it possible to\nadd additional 'services' without distoring the core code of RDFa processing.</p>\n\n<p>A transformer is a function with three arguments:</p>\n\n<ul>\n<li>C{node}: a DOM node for the top level element of the DOM tree</li>\n<li>C{options}: the current L{Options} instance</li>\n<li>C{state}: the current L{ExecutionContext} instance, corresponding to the top level DOM Tree element</li>\n</ul>\n\n<p>The function may perform any type of change on the DOM tree; the typical behavior is to add or remove attributes on specific elements. Some transformations are included in the package and can be used as examples; see the L{transform} module of the distribution. These are:</p>\n\n<ul>\n<li>The C{@name} attribute of the C{meta} element is copied into a C{@property} attribute of the same element</li>\n<li>Interpreting the 'openid' references in the header. See L{transform.OpenID} for further details.</li>\n<li>Implementing the Dublin Core dialect to include DC statements from the header.  See L{transform.DublinCore} for further details.</li>\n</ul>\n\n<p>The user of the package may refer add these transformers to L{Options} instance. Here is a possible usage with the \u201copenid\u201d transformer added to the call::\n from pyRdfa.options import Options\n from pyRdfa.transform.OpenID import OpenID_transform\n options = Options(transformers=[OpenID_transform])\n print pyRdfa(options=options).rdf_from_source('filename')</p>\n\n<p>@summary: RDFa parser (distiller)\n@requires: Python version 2.7 or python 3.8 or up\n@requires: U{RDFLib<a href=\"http://rdflib.net\">http://rdflib.net</a>}; version 3.X is preferred.\n@requires: U{html5lib<a href=\"http://code.google.com/p/html5lib/\">http://code.google.com/p/html5lib/</a>} for the HTML5 parsing (note that version 1.0b1 and 1.0b2 should be avoided, it may lead to unicode encoding problems)\n@requires: U{httpheader<a href=\"http://deron.meranda.us/python/httpheader/\">http://deron.meranda.us/python/httpheader/</a>}; however, a small modification had to make on the original file, so for this reason and to make distribution easier this module (single file) is added to the package.\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n\n<p>@var builtInTransformers: List of built-in transformers that are to be run regardless, because they are part of the RDFa spec\n@var CACHE_DIR_VAR: Environment variable used to define cache directories for RDFa vocabularies in case the default setting does not work or is not appropriate.\n@var rdfa_current_version: Current \"official\" version of RDFa that this package implements by default. This can be changed at the invocation of the package\n@var uri_schemes: List of registered (or widely used) URI schemes; used for warnings...</p>\n"}, {"fullname": "pyRdfa.name", "modulename": "pyRdfa", "qualname": "name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pyRdfa3&#x27;"}, {"fullname": "pyRdfa.ns_rdfa", "modulename": "pyRdfa", "qualname": "ns_rdfa", "kind": "variable", "doc": "<p></p>\n", "default_value": "Namespace(&#x27;http://www.w3.org/ns/rdfa#&#x27;)"}, {"fullname": "pyRdfa.RDFA_VOCAB", "modulename": "pyRdfa", "qualname": "RDFA_VOCAB", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#usesVocabulary&#x27;)"}, {"fullname": "pyRdfa.ns_xsd", "modulename": "pyRdfa", "qualname": "ns_xsd", "kind": "variable", "doc": "<p></p>\n", "default_value": "Namespace(&#x27;http://www.w3.org/2001/XMLSchema#&#x27;)"}, {"fullname": "pyRdfa.ns_distill", "modulename": "pyRdfa", "qualname": "ns_distill", "kind": "variable", "doc": "<p></p>\n", "default_value": "Namespace(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#&#x27;)"}, {"fullname": "pyRdfa.debug", "modulename": "pyRdfa", "qualname": "debug", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "pyRdfa.RDFaError", "modulename": "pyRdfa", "qualname": "RDFaError", "kind": "class", "doc": "<p>Superclass exceptions representing error conditions defined by the RDFa 1.1 specification.\nIt does not add any new functionality to the\nException class.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pyRdfa.RDFaError.__init__", "modulename": "pyRdfa", "qualname": "RDFaError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, {"fullname": "pyRdfa.RDFaError.msg", "modulename": "pyRdfa", "qualname": "RDFaError.msg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.FailedSource", "modulename": "pyRdfa", "qualname": "FailedSource", "kind": "class", "doc": "<p>Raised when the original source cannot be accessed. It does not add any new functionality to the\nException class.</p>\n", "bases": "RDFaError"}, {"fullname": "pyRdfa.FailedSource.__init__", "modulename": "pyRdfa", "qualname": "FailedSource.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">http_code</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.FailedSource.msg", "modulename": "pyRdfa", "qualname": "FailedSource.msg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.FailedSource.http_code", "modulename": "pyRdfa", "qualname": "FailedSource.http_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.HTTPError", "modulename": "pyRdfa", "qualname": "HTTPError", "kind": "class", "doc": "<p>Raised when HTTP problems are detected. It does not add any new functionality to the\nException class.</p>\n", "bases": "RDFaError"}, {"fullname": "pyRdfa.HTTPError.__init__", "modulename": "pyRdfa", "qualname": "HTTPError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">http_msg</span>, </span><span class=\"param\"><span class=\"n\">http_code</span></span>)</span>"}, {"fullname": "pyRdfa.HTTPError.msg", "modulename": "pyRdfa", "qualname": "HTTPError.msg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.HTTPError.http_code", "modulename": "pyRdfa", "qualname": "HTTPError.http_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.ProcessingError", "modulename": "pyRdfa", "qualname": "ProcessingError", "kind": "class", "doc": "<p>Error found during processing. It does not add any new functionality to the\nException class.</p>\n", "bases": "RDFaError"}, {"fullname": "pyRdfa.pyRdfaError", "modulename": "pyRdfa", "qualname": "pyRdfaError", "kind": "class", "doc": "<p>Superclass exceptions representing error conditions outside the RDFa 1.1 specification.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pyRdfa.RDFA_Error", "modulename": "pyRdfa", "qualname": "RDFA_Error", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#Error&#x27;)"}, {"fullname": "pyRdfa.RDFA_Warning", "modulename": "pyRdfa", "qualname": "RDFA_Warning", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#Warning&#x27;)"}, {"fullname": "pyRdfa.RDFA_Info", "modulename": "pyRdfa", "qualname": "RDFA_Info", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#Information&#x27;)"}, {"fullname": "pyRdfa.NonConformantMarkup", "modulename": "pyRdfa", "qualname": "NonConformantMarkup", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#DocumentError&#x27;)"}, {"fullname": "pyRdfa.UnresolvablePrefix", "modulename": "pyRdfa", "qualname": "UnresolvablePrefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#UnresolvedCURIE&#x27;)"}, {"fullname": "pyRdfa.UnresolvableReference", "modulename": "pyRdfa", "qualname": "UnresolvableReference", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#UnresolvedCURIE&#x27;)"}, {"fullname": "pyRdfa.UnresolvableTerm", "modulename": "pyRdfa", "qualname": "UnresolvableTerm", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#UnresolvedTerm&#x27;)"}, {"fullname": "pyRdfa.VocabReferenceError", "modulename": "pyRdfa", "qualname": "VocabReferenceError", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#VocabReferenceError&#x27;)"}, {"fullname": "pyRdfa.PrefixRedefinitionWarning", "modulename": "pyRdfa", "qualname": "PrefixRedefinitionWarning", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#PrefixRedefinition&#x27;)"}, {"fullname": "pyRdfa.FileReferenceError", "modulename": "pyRdfa", "qualname": "FileReferenceError", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#FileReferenceError&#x27;)"}, {"fullname": "pyRdfa.HTError", "modulename": "pyRdfa", "qualname": "HTError", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#HTTPError&#x27;)"}, {"fullname": "pyRdfa.IncorrectPrefixDefinition", "modulename": "pyRdfa", "qualname": "IncorrectPrefixDefinition", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#IncorrectPrefixDefinition&#x27;)"}, {"fullname": "pyRdfa.IncorrectBlankNodeUsage", "modulename": "pyRdfa", "qualname": "IncorrectBlankNodeUsage", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#IncorrectBlankNodeUsage&#x27;)"}, {"fullname": "pyRdfa.IncorrectLiteral", "modulename": "pyRdfa", "qualname": "IncorrectLiteral", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#IncorrectLiteral&#x27;)"}, {"fullname": "pyRdfa.err_no_blank_node", "modulename": "pyRdfa", "qualname": "err_no_blank_node", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Blank node in %s position is not allowed; ignored&#x27;"}, {"fullname": "pyRdfa.err_redefining_URI_as_prefix", "modulename": "pyRdfa", "qualname": "err_redefining_URI_as_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;&#x27;%s&#x27; a registered or an otherwise used URI scheme, but is defined as a prefix here; is this a mistake? (see, eg, http://en.wikipedia.org/wiki/URI_scheme or http://www.iana.org/assignments/uri-schemes.html for further information for most of the URI schemes)&quot;"}, {"fullname": "pyRdfa.err_xmlns_deprecated", "modulename": "pyRdfa", "qualname": "err_xmlns_deprecated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;The usage of &#x27;xmlns&#x27; for prefix definition is deprecated; please use the &#x27;prefix&#x27; attribute instead (definition for &#x27;%s&#x27;)&quot;"}, {"fullname": "pyRdfa.err_bnode_local_prefix", "modulename": "pyRdfa", "qualname": "err_bnode_local_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;The &#x27;_&#x27; local CURIE prefix is reserved for blank nodes, and cannot be defined as a prefix&quot;"}, {"fullname": "pyRdfa.err_col_local_prefix", "modulename": "pyRdfa", "qualname": "err_col_local_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;The character &#x27;:&#x27; is not valid in a CURIE Prefix, and cannot be used in a prefix definition (definition for &#x27;%s&#x27;)&quot;"}, {"fullname": "pyRdfa.err_missing_URI_prefix", "modulename": "pyRdfa", "qualname": "err_missing_URI_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Missing URI in prefix declaration for &#x27;%s&#x27; (in &#x27;%s&#x27;)&quot;"}, {"fullname": "pyRdfa.err_invalid_prefix", "modulename": "pyRdfa", "qualname": "err_invalid_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Invalid prefix declaration &#x27;%s&#x27; (in &#x27;%s&#x27;)&quot;"}, {"fullname": "pyRdfa.err_no_default_prefix", "modulename": "pyRdfa", "qualname": "err_no_default_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Default prefix cannot be changed (in &#x27;%s&#x27;)&quot;"}, {"fullname": "pyRdfa.err_prefix_and_xmlns", "modulename": "pyRdfa", "qualname": "err_prefix_and_xmlns", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;@prefix setting for &#x27;%s&#x27; overrides the &#x27;xmlns:%s&#x27; setting; may be a source of problem if same file is run through RDFa 1.0&quot;"}, {"fullname": "pyRdfa.err_non_ncname_prefix", "modulename": "pyRdfa", "qualname": "err_non_ncname_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Non NCNAME &#x27;%s&#x27; in prefix definition (in &#x27;%s&#x27;); ignored&quot;"}, {"fullname": "pyRdfa.err_absolute_reference", "modulename": "pyRdfa", "qualname": "err_absolute_reference", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;CURIE Reference part contains an authority part: %s (in &#x27;%s&#x27;); ignored&quot;"}, {"fullname": "pyRdfa.err_query_reference", "modulename": "pyRdfa", "qualname": "err_query_reference", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;CURIE Reference query part contains an unauthorized character: %s (in &#x27;%s&#x27;); ignored&quot;"}, {"fullname": "pyRdfa.err_fragment_reference", "modulename": "pyRdfa", "qualname": "err_fragment_reference", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;CURIE Reference fragment part contains an unauthorized character: %s (in &#x27;%s&#x27;); ignored&quot;"}, {"fullname": "pyRdfa.err_lang", "modulename": "pyRdfa", "qualname": "err_lang", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;There is a problem with language setting; either both xml:lang and lang used on an element with different values, or, for (X)HTML5, only xml:lang is used.&#x27;"}, {"fullname": "pyRdfa.err_URI_scheme", "modulename": "pyRdfa", "qualname": "err_URI_scheme", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Unusual URI scheme used in &lt;%s&gt;; may that be a mistake, e.g., resulting from using an undefined CURIE prefix or an incorrect CURIE?&#x27;"}, {"fullname": "pyRdfa.err_illegal_safe_CURIE", "modulename": "pyRdfa", "qualname": "err_illegal_safe_CURIE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Illegal safe CURIE: %s; ignored&#x27;"}, {"fullname": "pyRdfa.err_no_CURIE_in_safe_CURIE", "modulename": "pyRdfa", "qualname": "err_no_CURIE_in_safe_CURIE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Safe CURIE is used, but the value does not correspond to a defined CURIE: [%s]; ignored&#x27;"}, {"fullname": "pyRdfa.err_undefined_terms", "modulename": "pyRdfa", "qualname": "err_undefined_terms", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;&#x27;%s&#x27; is used as a term, but has not been defined as such; ignored&quot;"}, {"fullname": "pyRdfa.err_non_legal_CURIE_ref", "modulename": "pyRdfa", "qualname": "err_non_legal_CURIE_ref", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Relative URI is not allowed in this position (or not a legal CURIE reference) &#x27;%s&#x27;; ignored&quot;"}, {"fullname": "pyRdfa.err_undefined_CURIE", "modulename": "pyRdfa", "qualname": "err_undefined_CURIE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Undefined CURIE: &#x27;%s&#x27;; ignored&quot;"}, {"fullname": "pyRdfa.err_prefix_redefinition", "modulename": "pyRdfa", "qualname": "err_prefix_redefinition", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Prefix &#x27;%s&#x27; (defined in the initial RDFa context or in an ancestor) is redefined&quot;"}, {"fullname": "pyRdfa.err_unusual_char_in_URI", "modulename": "pyRdfa", "qualname": "err_unusual_char_in_URI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Unusual character in uri: %s; possible error?&#x27;"}, {"fullname": "pyRdfa.CACHE_DIR_VAR", "modulename": "pyRdfa", "qualname": "CACHE_DIR_VAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PyRdfaCacheDir&#x27;"}, {"fullname": "pyRdfa.rdfa_current_version", "modulename": "pyRdfa", "qualname": "rdfa_current_version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1.1&#x27;"}, {"fullname": "pyRdfa.registered_iana_schemes", "modulename": "pyRdfa", "qualname": "registered_iana_schemes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;aaa&#x27;, &#x27;aaas&#x27;, &#x27;acap&#x27;, &#x27;cap&#x27;, &#x27;cid&#x27;, &#x27;crid&#x27;, &#x27;data&#x27;, &#x27;dav&#x27;, &#x27;dict&#x27;, &#x27;did&#x27;, &#x27;dns&#x27;, &#x27;fax&#x27;, &#x27;file&#x27;, &#x27;ftp&#x27;, &#x27;geo&#x27;, &#x27;go&#x27;, &#x27;gopher&#x27;, &#x27;h323&#x27;, &#x27;http&#x27;, &#x27;https&#x27;, &#x27;iax&#x27;, &#x27;icap&#x27;, &#x27;im&#x27;, &#x27;imap&#x27;, &#x27;info&#x27;, &#x27;ipp&#x27;, &#x27;iris&#x27;, &#x27;ldap&#x27;, &#x27;lsid&#x27;, &#x27;mailto&#x27;, &#x27;mid&#x27;, &#x27;modem&#x27;, &#x27;msrp&#x27;, &#x27;msrps&#x27;, &#x27;mtqp&#x27;, &#x27;mupdate&#x27;, &#x27;news&#x27;, &#x27;nfs&#x27;, &#x27;nntp&#x27;, &#x27;opaquelocktoken&#x27;, &#x27;pop&#x27;, &#x27;pres&#x27;, &#x27;prospero&#x27;, &#x27;rstp&#x27;, &#x27;rsync&#x27;, &#x27;service&#x27;, &#x27;shttp&#x27;, &#x27;sieve&#x27;, &#x27;sip&#x27;, &#x27;sips&#x27;, &#x27;sms&#x27;, &#x27;snmp&#x27;, &#x27;soap&#x27;, &#x27;tag&#x27;, &#x27;tel&#x27;, &#x27;telnet&#x27;, &#x27;tftp&#x27;, &#x27;thismessage&#x27;, &#x27;tn3270&#x27;, &#x27;tip&#x27;, &#x27;tv&#x27;, &#x27;urn&#x27;, &#x27;vemmi&#x27;, &#x27;wais&#x27;, &#x27;ws&#x27;, &#x27;wss&#x27;, &#x27;xmpp&#x27;]"}, {"fullname": "pyRdfa.unofficial_common", "modulename": "pyRdfa", "qualname": "unofficial_common", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;about&#x27;, &#x27;adiumxtra&#x27;, &#x27;aim&#x27;, &#x27;apt&#x27;, &#x27;afp&#x27;, &#x27;aw&#x27;, &#x27;bitcoin&#x27;, &#x27;bolo&#x27;, &#x27;callto&#x27;, &#x27;chrome&#x27;, &#x27;coap&#x27;, &#x27;content&#x27;, &#x27;cvs&#x27;, &#x27;doi&#x27;, &#x27;ed2k&#x27;, &#x27;facetime&#x27;, &#x27;feed&#x27;, &#x27;finger&#x27;, &#x27;fish&#x27;, &#x27;git&#x27;, &#x27;gg&#x27;, &#x27;gizmoproject&#x27;, &#x27;gtalk&#x27;, &#x27;irc&#x27;, &#x27;ircs&#x27;, &#x27;irc6&#x27;, &#x27;itms&#x27;, &#x27;jar&#x27;, &#x27;javascript&#x27;, &#x27;keyparc&#x27;, &#x27;lastfm&#x27;, &#x27;ldaps&#x27;, &#x27;magnet&#x27;, &#x27;maps&#x27;, &#x27;market&#x27;, &#x27;message&#x27;, &#x27;mms&#x27;, &#x27;msnim&#x27;, &#x27;mumble&#x27;, &#x27;mvn&#x27;, &#x27;notes&#x27;, &#x27;palm&#x27;, &#x27;paparazzi&#x27;, &#x27;psync&#x27;, &#x27;rmi&#x27;, &#x27;secondlife&#x27;, &#x27;sgn&#x27;, &#x27;skype&#x27;, &#x27;spotify&#x27;, &#x27;ssh&#x27;, &#x27;sftp&#x27;, &#x27;smb&#x27;, &#x27;soldat&#x27;, &#x27;steam&#x27;, &#x27;svn&#x27;, &#x27;teamspeak&#x27;, &#x27;things&#x27;, &#x27;udb&#x27;, &#x27;unreal&#x27;, &#x27;ut2004&#x27;, &#x27;ventrillo&#x27;, &#x27;view-source&#x27;, &#x27;webcal&#x27;, &#x27;wtai&#x27;, &#x27;wyciwyg&#x27;, &#x27;xfire&#x27;, &#x27;xri&#x27;, &#x27;ymsgr&#x27;]"}, {"fullname": "pyRdfa.historical_iana_schemes", "modulename": "pyRdfa", "qualname": "historical_iana_schemes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;fax&#x27;, &#x27;mailserver&#x27;, &#x27;modem&#x27;, &#x27;pack&#x27;, &#x27;prospero&#x27;, &#x27;snews&#x27;, &#x27;videotex&#x27;, &#x27;wais&#x27;]"}, {"fullname": "pyRdfa.provisional_iana_schemes", "modulename": "pyRdfa", "qualname": "provisional_iana_schemes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;afs&#x27;, &#x27;dtn&#x27;, &#x27;dvb&#x27;, &#x27;icon&#x27;, &#x27;ipn&#x27;, &#x27;jms&#x27;, &#x27;oid&#x27;, &#x27;rsync&#x27;, &#x27;ni&#x27;]"}, {"fullname": "pyRdfa.other_used_schemes", "modulename": "pyRdfa", "qualname": "other_used_schemes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;hdl&#x27;, &#x27;isbn&#x27;, &#x27;issn&#x27;, &#x27;mstp&#x27;, &#x27;rtmp&#x27;, &#x27;rtspu&#x27;, &#x27;stp&#x27;]"}, {"fullname": "pyRdfa.uri_schemes", "modulename": "pyRdfa", "qualname": "uri_schemes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;aaa&#x27;, &#x27;aaas&#x27;, &#x27;acap&#x27;, &#x27;cap&#x27;, &#x27;cid&#x27;, &#x27;crid&#x27;, &#x27;data&#x27;, &#x27;dav&#x27;, &#x27;dict&#x27;, &#x27;did&#x27;, &#x27;dns&#x27;, &#x27;fax&#x27;, &#x27;file&#x27;, &#x27;ftp&#x27;, &#x27;geo&#x27;, &#x27;go&#x27;, &#x27;gopher&#x27;, &#x27;h323&#x27;, &#x27;http&#x27;, &#x27;https&#x27;, &#x27;iax&#x27;, &#x27;icap&#x27;, &#x27;im&#x27;, &#x27;imap&#x27;, &#x27;info&#x27;, &#x27;ipp&#x27;, &#x27;iris&#x27;, &#x27;ldap&#x27;, &#x27;lsid&#x27;, &#x27;mailto&#x27;, &#x27;mid&#x27;, &#x27;modem&#x27;, &#x27;msrp&#x27;, &#x27;msrps&#x27;, &#x27;mtqp&#x27;, &#x27;mupdate&#x27;, &#x27;news&#x27;, &#x27;nfs&#x27;, &#x27;nntp&#x27;, &#x27;opaquelocktoken&#x27;, &#x27;pop&#x27;, &#x27;pres&#x27;, &#x27;prospero&#x27;, &#x27;rstp&#x27;, &#x27;rsync&#x27;, &#x27;service&#x27;, &#x27;shttp&#x27;, &#x27;sieve&#x27;, &#x27;sip&#x27;, &#x27;sips&#x27;, &#x27;sms&#x27;, &#x27;snmp&#x27;, &#x27;soap&#x27;, &#x27;tag&#x27;, &#x27;tel&#x27;, &#x27;telnet&#x27;, &#x27;tftp&#x27;, &#x27;thismessage&#x27;, &#x27;tn3270&#x27;, &#x27;tip&#x27;, &#x27;tv&#x27;, &#x27;urn&#x27;, &#x27;vemmi&#x27;, &#x27;wais&#x27;, &#x27;ws&#x27;, &#x27;wss&#x27;, &#x27;xmpp&#x27;, &#x27;about&#x27;, &#x27;adiumxtra&#x27;, &#x27;aim&#x27;, &#x27;apt&#x27;, &#x27;afp&#x27;, &#x27;aw&#x27;, &#x27;bitcoin&#x27;, &#x27;bolo&#x27;, &#x27;callto&#x27;, &#x27;chrome&#x27;, &#x27;coap&#x27;, &#x27;content&#x27;, &#x27;cvs&#x27;, &#x27;doi&#x27;, &#x27;ed2k&#x27;, &#x27;facetime&#x27;, &#x27;feed&#x27;, &#x27;finger&#x27;, &#x27;fish&#x27;, &#x27;git&#x27;, &#x27;gg&#x27;, &#x27;gizmoproject&#x27;, &#x27;gtalk&#x27;, &#x27;irc&#x27;, &#x27;ircs&#x27;, &#x27;irc6&#x27;, &#x27;itms&#x27;, &#x27;jar&#x27;, &#x27;javascript&#x27;, &#x27;keyparc&#x27;, &#x27;lastfm&#x27;, &#x27;ldaps&#x27;, &#x27;magnet&#x27;, &#x27;maps&#x27;, &#x27;market&#x27;, &#x27;message&#x27;, &#x27;mms&#x27;, &#x27;msnim&#x27;, &#x27;mumble&#x27;, &#x27;mvn&#x27;, &#x27;notes&#x27;, &#x27;palm&#x27;, &#x27;paparazzi&#x27;, &#x27;psync&#x27;, &#x27;rmi&#x27;, &#x27;secondlife&#x27;, &#x27;sgn&#x27;, &#x27;skype&#x27;, &#x27;spotify&#x27;, &#x27;ssh&#x27;, &#x27;sftp&#x27;, &#x27;smb&#x27;, &#x27;soldat&#x27;, &#x27;steam&#x27;, &#x27;svn&#x27;, &#x27;teamspeak&#x27;, &#x27;things&#x27;, &#x27;udb&#x27;, &#x27;unreal&#x27;, &#x27;ut2004&#x27;, &#x27;ventrillo&#x27;, &#x27;view-source&#x27;, &#x27;webcal&#x27;, &#x27;wtai&#x27;, &#x27;wyciwyg&#x27;, &#x27;xfire&#x27;, &#x27;xri&#x27;, &#x27;ymsgr&#x27;, &#x27;fax&#x27;, &#x27;mailserver&#x27;, &#x27;modem&#x27;, &#x27;pack&#x27;, &#x27;prospero&#x27;, &#x27;snews&#x27;, &#x27;videotex&#x27;, &#x27;wais&#x27;, &#x27;afs&#x27;, &#x27;dtn&#x27;, &#x27;dvb&#x27;, &#x27;icon&#x27;, &#x27;ipn&#x27;, &#x27;jms&#x27;, &#x27;oid&#x27;, &#x27;rsync&#x27;, &#x27;ni&#x27;, &#x27;hdl&#x27;, &#x27;isbn&#x27;, &#x27;issn&#x27;, &#x27;mstp&#x27;, &#x27;rtmp&#x27;, &#x27;rtspu&#x27;, &#x27;stp&#x27;]"}, {"fullname": "pyRdfa.builtInTransformers", "modulename": "pyRdfa", "qualname": "builtInTransformers", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;function empty_safe_curie&gt;, &lt;function top_about&gt;, &lt;function vocab_for_role&gt;]"}, {"fullname": "pyRdfa.pyRdfa", "modulename": "pyRdfa", "qualname": "pyRdfa", "kind": "class", "doc": "<p>Main processing class for the distiller</p>\n\n<p>@ivar options: an instance of the L{Options} class\n@ivar media_type: the preferred default media type, possibly set at initialization\n@ivar base: the base value, possibly set at initialization\n@ivar http_status: HTTP Status, to be returned when the package is used via a CGI entry. Initially set to 200, may be modified by exception handlers</p>\n"}, {"fullname": "pyRdfa.pyRdfa.__init__", "modulename": "pyRdfa", "qualname": "pyRdfa.__init__", "kind": "function", "doc": "<p>@keyword options: Options for the distiller\n@type options: L{Options}\n@keyword base: URI for the default \"base\" value (usually the URI of the file to be processed)\n@keyword media_type: explicit setting of the preferred media type (a.k.a. content type) of the the RDFa source\n@keyword rdfa_version: the RDFa version that should be used. If not set, the value of the global L{rdfa_current_version} variable is used</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">base</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">rdfa_version</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.pyRdfa.http_status", "modulename": "pyRdfa", "qualname": "pyRdfa.http_status", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.pyRdfa.base", "modulename": "pyRdfa", "qualname": "pyRdfa.base", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.pyRdfa.charset", "modulename": "pyRdfa", "qualname": "pyRdfa.charset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.pyRdfa.media_type", "modulename": "pyRdfa", "qualname": "pyRdfa.media_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.pyRdfa.graph_from_DOM", "modulename": "pyRdfa", "qualname": "pyRdfa.graph_from_DOM", "kind": "function", "doc": "<p>Extract the RDF Graph from a DOM tree. This is where the real processing happens. All other methods get down to this\none, eventually (e.g., after opening a URI and parsing it into a DOM).\n@param dom: a DOM Node element, the top level entry node for the whole tree (i.e., the C{dom.documentElement} is used to initiate processing down the node hierarchy)\n@keyword graph: an RDF Graph (if None, than a new one is created)\n@type graph: rdflib Graph instance.\n@keyword pgraph: an RDF Graph to hold (possibly) the processor graph content. If None, and the error/warning triples are to be generated, they will be added to the returned graph. Otherwise they are stored in this graph.\n@type pgraph: rdflib Graph instance\n@return: an RDF Graph\n@rtype: rdflib Graph instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.pyRdfa.graph_from_source", "modulename": "pyRdfa", "qualname": "pyRdfa.graph_from_source", "kind": "function", "doc": "<p>Extract an RDF graph from an RDFa source. The source is parsed, the RDF extracted, and the RDFa Graph is\nreturned. This is a front-end to the L{pyRdfa.graph_from_DOM} method.</p>\n\n<p>@param name: a URI, a file name, or a file-like object\n@param graph: rdflib Graph instance. If None, a new one is created.\n@param pgraph: rdflib Graph instance for the processor graph. If None, and the error/warning triples are to be generated, they will be added to the returned graph. Otherwise they are stored in this graph.\n@param rdfOutput: whether runtime exceptions should be turned into RDF and returned as part of the processor graph\n@return: an RDF Graph\n@rtype: rdflib Graph instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rdfOutput</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.pyRdfa.rdf_from_sources", "modulename": "pyRdfa", "qualname": "pyRdfa.rdf_from_sources", "kind": "function", "doc": "<p>Extract and RDF graph from a list of RDFa sources and serialize them in one graph. The sources are parsed, the RDF\nextracted, and serialization is done in the specified format.\n@param names: list of sources, each can be a URI, a file name, or a file-like object\n@keyword outputFormat: serialization format. Can be one of \"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\". \"xml\", \"pretty-xml\", \"json\" or \"json-ld\". \"turtle\" and \"n3\", \"xml\" and \"pretty-xml\", and \"json\" and \"json-ld\" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.\n@keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph\n@type rdfOutput: boolean\n@return: a serialized RDF Graph\n@rtype: string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">names</span>, </span><span class=\"param\"><span class=\"n\">outputFormat</span><span class=\"o\">=</span><span class=\"s1\">&#39;turtle&#39;</span>, </span><span class=\"param\"><span class=\"n\">rdfOutput</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.pyRdfa.rdf_from_source", "modulename": "pyRdfa", "qualname": "pyRdfa.rdf_from_source", "kind": "function", "doc": "<p>Extract and RDF graph from an RDFa source and serialize it in one graph. The source is parsed, the RDF\nextracted, and serialization is done in the specified format.\n@param name: a URI, a file name, or a file-like object\n@keyword outputFormat: serialization format. Can be one of \"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\". \"xml\", \"pretty-xml\", or \"json-ld\". \"turtle\" and \"n3\", or \"xml\" and \"pretty-xml\" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.\n@keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph\n@type rdfOutput: boolean\n@return: a serialized RDF Graph\n@rtype: string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">outputFormat</span><span class=\"o\">=</span><span class=\"s1\">&#39;turtle&#39;</span>, </span><span class=\"param\"><span class=\"n\">rdfOutput</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.processURI", "modulename": "pyRdfa", "qualname": "processURI", "kind": "function", "doc": "<p>The standard processing of an RDFa uri options in a form; used as an entry point from a CGI call.</p>\n\n<p>The call accepts extra form options (i.e., HTTP GET options) as follows:</p>\n\n<ul>\n<li>C{graph=[output|processor|output,processor|processor,output]} specifying which graphs are returned. Default: C{output}</li>\n<li>C{space_preserve=[true|false]} means that plain literals are normalized in terms of white spaces. Default: C{false}</li>\n<li>C{rfa_version} provides the RDFa version that should be used for distilling. The string should be of the form \"1.0\" or \"1.1\". Default is the highest version the current package implements, currently \"1.1\"</li>\n<li>C{host_language=[xhtml,html,xml]} : the host language. Used when files are uploaded or text is added verbatim, otherwise the HTTP return header should be used. Default C{xml}</li>\n<li>C{embedded_rdf=[true|false]} : whether embedded turtle or RDF/XML content should be added to the output graph. Default: C{false}</li>\n<li>C{vocab_expansion=[true|false]} : whether the vocabularies should be expanded through the restricted RDFS entailment. Default: C{false}</li>\n<li>C{vocab_cache=[true|false]} : whether vocab caching should be performed or whether it should be ignored and vocabulary files should be picked up every time. Default: C{false}</li>\n<li>C{vocab_cache_report=[true|false]} : whether vocab caching details should be reported. Default: C{false}</li>\n<li>C{vocab_cache_bypass=[true|false]} : whether vocab caches have to be regenerated every time. Default: C{false}</li>\n<li>C{rdfa_lite=[true|false]} : whether warnings should be generated for non RDFa Lite attribute usage. Default: C{false}</li>\n<li>C{certifi_verify=[true|false]} : whether the SSL certificate needs to be verified. Default: C{true}</li>\n</ul>\n\n<p>@param uri: URI to access. Note that the C{text:} and C{uploaded:} fake URI values are treated separately; the former is for textual intput (in which case a StringIO is used to get the data) and the latter is for uploaded file, where the form gives access to the file directly.\n@param outputFormat: serialization format, as defined by the package. Currently \"xml\", \"turtle\", \"nt\", or \"json\". Default is \"turtle\", also used if any other string is given.\n@param form: extra call options (from the CGI call) to set up the local options\n@type form: cgi FieldStorage instance\n@return: serialized graph\n@rtype: string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uri</span>, </span><span class=\"param\"><span class=\"n\">outputFormat</span>, </span><span class=\"param\"><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.embeddedRDF", "modulename": "pyRdfa.embeddedRDF", "kind": "module", "doc": "<p>Extracting possible embedded RDF/XML content from the file and parse it separately into the Graph. This is used, for example\nby U{SVG 1.2 Tiny<a href=\"http://www.w3.org/TR/SVGMobile12/\">http://www.w3.org/TR/SVGMobile12/</a>}.</p>\n\n<p>@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org\n@version: $Id: embeddedRDF.py,v 1.15 2012/11/16 17:51:53 ivan Exp $</p>\n"}, {"fullname": "pyRdfa.embeddedRDF.handle_embeddedRDF", "modulename": "pyRdfa.embeddedRDF", "qualname": "handle_embeddedRDF", "kind": "function", "doc": "<p>Handles embedded RDF. There are two possibilities:</p>\n\n<ul>\n<li>the file is one of the XML dialects that allows for an embedded RDF/XML portion. See the L{host.accept_embedded_rdf_xml} for those (a typical example is SVG). </li>\n<li>the file is HTML and there is a turtle portion in the C{<script>} element with type text/turtle. </li>\n</ul>\n\n<p>@param node: a DOM node for the top level element\n@param graph: target rdf graph\n@type graph: RDFLib's Graph object instance\n@param state: the inherited state (namespaces, lang, etc)\n@type state: L{state.ExecutionContext}\n@return: whether an RDF/XML or turtle content has been detected or not. If TRUE, the RDFa processing should not occur on the node and its descendents. \n@rtype: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras", "modulename": "pyRdfa.extras", "kind": "module", "doc": "<p>Collection of external modules that are used by pyRdfa and are added for an easier \ndistribution</p>\n"}, {"fullname": "pyRdfa.extras.httpheader", "modulename": "pyRdfa.extras.httpheader", "kind": "module", "doc": "<p>Utility functions to work with HTTP headers.</p>\n\n<p>This module provides some utility functions useful for parsing\nand dealing with some of the HTTP 1.1 protocol headers which\nare not adequately covered by the standard Python libraries.</p>\n\n<p>Requires Python 2.2 or later.</p>\n\n<p>The functionality includes the correct interpretation of the various\nAccept-* style headers, content negotiation, byte range requests,\nHTTP-style date/times, and more.</p>\n\n<p>There are a few classes defined by this module:</p>\n\n<ul>\n<li>class content_type   -- media types such as 'text/plain'</li>\n<li>class language_tag   -- language tags such as 'en-US'</li>\n<li>class range_set      -- a collection of (byte) range specifiers</li>\n<li>class range_spec     -- a single (byte) range specifier</li>\n</ul>\n\n<p>The primary functions in this module may be categorized as follows:</p>\n\n<ul>\n<li><p>Content negotiation functions...</p>\n\n<ul>\n<li>acceptable_content_type()</li>\n<li>acceptable_language()</li>\n<li>acceptable_charset()</li>\n<li>acceptable_encoding()</li>\n</ul></li>\n<li><p>Mid-level header parsing functions...</p>\n\n<ul>\n<li>parse_accept_header()</li>\n<li>parse_accept_language_header()</li>\n<li>parse_range_header()</li>\n</ul></li>\n<li><p>Date and time...</p>\n\n<ul>\n<li>http_datetime()</li>\n<li>parse_http_datetime()</li>\n</ul></li>\n<li><p>Utility functions...</p>\n\n<ul>\n<li>quote_string()</li>\n<li>remove_comments()</li>\n<li>canonical_charset()</li>\n</ul></li>\n<li><p>Low level string parsing functions...</p>\n\n<ul>\n<li>parse_comma_list()</li>\n<li>parse_comment()</li>\n<li>parse_qvalue_accept_list()</li>\n<li>parse_media_type()</li>\n<li>parse_number()</li>\n<li>parse_parameter_list()</li>\n<li>parse_quoted_string()</li>\n<li>parse_range_set()</li>\n<li>parse_range_spec()</li>\n<li>parse_token()</li>\n<li>parse_token_or_quoted_string()</li>\n</ul></li>\n</ul>\n\n<p>And there are some specialized exception classes:</p>\n\n<ul>\n<li>RangeUnsatisfiableError</li>\n<li>RangeUnmergableError</li>\n<li>ParseError</li>\n</ul>\n\n<p>See also:</p>\n\n<ul>\n<li>RFC 2616, \"Hypertext Transfer Protocol -- HTTP/1.1\", June 1999.\n<a href=\"http://www.ietf.org/rfc/rfc2616.txt\">http://www.ietf.org/rfc/rfc2616.txt</a>\nErrata at <a href=\"http://purl.org/NET/http-errata\">http://purl.org/NET/http-errata</a></li>\n<li>RFC 2046, \"(MIME) Part Two: Media Types\", November 1996.\n<a href=\"http://www.ietf.org/rfc/rfc2046.txt\">http://www.ietf.org/rfc/rfc2046.txt</a></li>\n<li><p>RFC 3066, \"Tags for the Identification of Languages\", January 2001.\n        <a href=\"http://www.ietf.org/rfc/rfc3066.txt\">http://www.ietf.org/rfc/rfc3066.txt</a></p>\n\n<p>Note: I have made a small modification on the regexp for internet date, \nto make it more liberal (ie, accept a time zone string of the form +0000)\nIvan Herman <a href=\"http://www.ivan-herman.net\">http://www.ivan-herman.net</a>, March 2011.</p>\n\n<p>Have added statements to make it (hopefully) Python 3 compatible.\nIvan Herman <a href=\"http://www.ivan-herman.net\">http://www.ivan-herman.net</a>, August 2012.</p></li>\n</ul>\n"}, {"fullname": "pyRdfa.extras.httpheader.SEPARATORS", "modulename": "pyRdfa.extras.httpheader", "qualname": "SEPARATORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "frozenset({&#x27;[&#x27;, &#x27;\\t&#x27;, &#x27;]&#x27;, &#x27;,&#x27;, &#x27;/&#x27;, &#x27;{&#x27;, &#x27;)&#x27;, &#x27;@&#x27;, &#x27;&lt;&#x27;, &#x27;\\\\&#x27;, &#x27;:&#x27;, &#x27;(&#x27;, &#x27;?&#x27;, &#x27;;&#x27;, &#x27;=&#x27;, &#x27;&quot;&#x27;, &#x27; &#x27;, &#x27;}&#x27;, &#x27;&gt;&#x27;})"}, {"fullname": "pyRdfa.extras.httpheader.LWS", "modulename": "pyRdfa.extras.httpheader", "qualname": "LWS", "kind": "variable", "doc": "<p></p>\n", "default_value": "frozenset({&#x27; &#x27;, &#x27;\\n&#x27;, &#x27;\\r&#x27;, &#x27;\\t&#x27;})"}, {"fullname": "pyRdfa.extras.httpheader.CRLF", "modulename": "pyRdfa.extras.httpheader", "qualname": "CRLF", "kind": "variable", "doc": "<p></p>\n", "default_value": "frozenset({&#x27;\\r&#x27;, &#x27;\\n&#x27;})"}, {"fullname": "pyRdfa.extras.httpheader.DIGIT", "modulename": "pyRdfa.extras.httpheader", "qualname": "DIGIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "frozenset({&#x27;7&#x27;, &#x27;2&#x27;, &#x27;8&#x27;, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;5&#x27;, &#x27;4&#x27;, &#x27;1&#x27;, &#x27;9&#x27;, &#x27;6&#x27;})"}, {"fullname": "pyRdfa.extras.httpheader.HEX", "modulename": "pyRdfa.extras.httpheader", "qualname": "HEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "frozenset({&#x27;8&#x27;, &#x27;b&#x27;, &#x27;B&#x27;, &#x27;0&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;3&#x27;, &#x27;5&#x27;, &#x27;f&#x27;, &#x27;a&#x27;, &#x27;9&#x27;, &#x27;6&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;A&#x27;, &#x27;4&#x27;, &#x27;7&#x27;, &#x27;2&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;1&#x27;, &#x27;E&#x27;})"}, {"fullname": "pyRdfa.extras.httpheader.http_datetime", "modulename": "pyRdfa.extras.httpheader", "qualname": "http_datetime", "kind": "function", "doc": "<p>Formats a datetime as an HTTP 1.1 Date/Time string.</p>\n\n<p>Takes a standard Python datetime object and returns a string\nformatted according to the HTTP 1.1 date/time format.</p>\n\n<p>If no datetime is provided (or None) then the current\ntime is used.</p>\n\n<p>ABOUT TIMEZONES: If the passed in datetime object is naive it is\nassumed to be in UTC already.  But if it has a tzinfo component,\nthe returned timestamp string will have been converted to UTC\nautomatically.  So if you use timezone-aware datetimes, you need\nnot worry about conversion to UTC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_http_datetime", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_http_datetime", "kind": "function", "doc": "<p>Returns a datetime object from an HTTP 1.1 Date/Time string.</p>\n\n<p>Note that HTTP dates are always in UTC, so the returned datetime\nobject will also be in UTC.</p>\n\n<p>You can optionally pass in a tzinfo object which should represent\nthe UTC timezone, and the returned datetime will then be\ntimezone-aware (allowing you to more easly translate it into\ndifferent timzeones later).</p>\n\n<p>If you set 'strict' to True, then only the RFC 1123 format\nis recognized.  Otherwise the backwards-compatible RFC 1036\nand Unix asctime(3) formats are also recognized.</p>\n\n<p>Please note that the day-of-the-week is not validated.\nAlso two-digit years, although not HTTP 1.1 compliant, are\ntreated according to recommended Y2K rules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datestring</span>, </span><span class=\"param\"><span class=\"n\">utc_tzinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.RangeUnsatisfiableError", "modulename": "pyRdfa.extras.httpheader", "qualname": "RangeUnsatisfiableError", "kind": "class", "doc": "<p>Exception class when a byte range lies outside the file size boundaries.</p>\n", "bases": "builtins.ValueError"}, {"fullname": "pyRdfa.extras.httpheader.RangeUnsatisfiableError.__init__", "modulename": "pyRdfa.extras.httpheader", "qualname": "RangeUnsatisfiableError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reason</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.extras.httpheader.RangeUnmergableError", "modulename": "pyRdfa.extras.httpheader", "qualname": "RangeUnmergableError", "kind": "class", "doc": "<p>Exception class when byte ranges are noncontiguous and can not be merged together.</p>\n", "bases": "builtins.ValueError"}, {"fullname": "pyRdfa.extras.httpheader.RangeUnmergableError.__init__", "modulename": "pyRdfa.extras.httpheader", "qualname": "RangeUnmergableError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reason</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.extras.httpheader.ParseError", "modulename": "pyRdfa.extras.httpheader", "qualname": "ParseError", "kind": "class", "doc": "<p>Exception class representing a string parsing error.</p>\n", "bases": "builtins.ValueError"}, {"fullname": "pyRdfa.extras.httpheader.ParseError.__init__", "modulename": "pyRdfa.extras.httpheader", "qualname": "ParseError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">input_string</span>, </span><span class=\"param\"><span class=\"n\">at_position</span></span>)</span>"}, {"fullname": "pyRdfa.extras.httpheader.ParseError.input_string", "modulename": "pyRdfa.extras.httpheader", "qualname": "ParseError.input_string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.ParseError.at_position", "modulename": "pyRdfa.extras.httpheader", "qualname": "ParseError.at_position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.is_token", "modulename": "pyRdfa.extras.httpheader", "qualname": "is_token", "kind": "function", "doc": "<p>Determines if the string is a valid token.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_comma_list", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_comma_list", "kind": "function", "doc": "<p>Parses a comma-separated list with optional whitespace.</p>\n\n<p>Takes an optional callback function <code>element_parser</code>, which\nis assumed to be able to parse an individual element.  It\nwill be passed the string and a <code>start</code> argument, and\nis expected to return a tuple (parsed_result, chars_consumed).</p>\n\n<p>If no element_parser is given, then either single tokens or\nquoted strings will be parsed.</p>\n\n<p>If min_count &gt; 0, then at least that many non-empty elements\nmust be in the list, or an error is raised.</p>\n\n<p>If max_count &gt; 0, then no more than that many non-empty elements\nmay be in the list, or an error is raised.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">element_parser</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">min_count</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">max_count</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_token", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_token", "kind": "function", "doc": "<p>Parses a token.</p>\n\n<p>A token is a string defined by RFC 2616 section 2.2 as:\n   token = 1*<any CHAR except CTLs or separators></p>\n\n<p>Returns a tuple (token, chars_consumed), or ('',0) if no token\nstarts at the given string position.  On a syntax error, a\nParseError exception will be raised.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.quote_string", "modulename": "pyRdfa.extras.httpheader", "qualname": "quote_string", "kind": "function", "doc": "<p>Produces a quoted string according to HTTP 1.1 rules.</p>\n\n<p>If always_quote is False and if the string is also a valid token,\nthen this function may return a string without quotes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">always_quote</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_quoted_string", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_quoted_string", "kind": "function", "doc": "<p>Parses a quoted string.</p>\n\n<p>Returns a tuple (string, chars_consumed).  The quote marks will\nhave been removed and all -escapes will have been replaced with\nthe characters they represent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_token_or_quoted_string", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_token_or_quoted_string", "kind": "function", "doc": "<p>Parses a token or a quoted-string.</p>\n\n<p>'s' is the string to parse, while start is the position within the\nstring where parsing should begin.  It will returns a tuple\n(token, chars_consumed), with all -escapes and quotation already\nprocessed.</p>\n\n<p>Syntax is according to BNF rules in RFC 2161 section 2.2,\nspecifically the 'token' and 'quoted-string' declarations.\nSyntax errors in the input string will result in ParseError\nbeing raised.</p>\n\n<p>If allow_quoted is False, then only tokens will be parsed instead\nof either a token or quoted-string.</p>\n\n<p>If allow_token is False, then only quoted-strings will be parsed\ninstead of either a token or quoted-string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">allow_quoted</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">allow_token</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.remove_comments", "modulename": "pyRdfa.extras.httpheader", "qualname": "remove_comments", "kind": "function", "doc": "<p>Removes any ()-style comments from a string.</p>\n\n<p>In HTTP, ()-comments can nest, and this function will correctly\ndeal with that.</p>\n\n<p>If 'collapse_spaces' is True, then if there is any whitespace\nsurrounding the comment, it will be replaced with a single space\ncharacter.  Whitespace also collapses across multiple comment\nsequences, so that \"a (b) (c) d\" becomes just \"a d\".</p>\n\n<p>Otherwise, if 'collapse_spaces' is False then all whitespace which\nis outside any comments is left intact as-is.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">collapse_spaces</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_comment", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_comment", "kind": "function", "doc": "<p>Parses a ()-style comment from a header value.</p>\n\n<p>Returns tuple (comment, chars_consumed), where the comment will\nhave had the outer-most parentheses and white space stripped.  Any\nnested comments will still have their parentheses and whitespace\nleft intact.</p>\n\n<p>All -escaped quoted pairs will have been replaced with the actual\ncharacters they represent, even within the inner nested comments.</p>\n\n<p>You should note that only a few HTTP headers, such as User-Agent\nor Via, allow ()-style comments within the header value.</p>\n\n<p>A comment is defined by RFC 2616 section 2.2 as:</p>\n\n<p>comment = \"(\" *( ctext | quoted-pair | comment ) \")\"\n   ctext   = <any TEXT excluding \"(\" and \")\"></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec", "kind": "class", "doc": "<p>A single contiguous (byte) range.</p>\n\n<p>A range_spec defines a range (of bytes) by specifying two offsets,\nthe 'first' and 'last', which are inclusive in the range.  Offsets\nare zero-based (the first byte is offset 0).  The range can not be\nempty or negative (has to satisfy first &lt;= last).</p>\n\n<p>The range can be unbounded on either end, represented here by the\nNone value, with these semantics:</p>\n\n<ul>\n<li><p>A 'last' of None always indicates the last possible byte\n(although that offset may not be known).</p></li>\n<li><p>A 'first' of None indicates this is a suffix range, where\n the last value is actually interpreted to be the number\n of bytes at the end of the file (regardless of file size).</p></li>\n</ul>\n\n<p>Note that it is not valid for both first and last to be None.</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.__init__", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">last</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.set", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.set", "kind": "function", "doc": "<p>Sets the value of this range given the first and last offsets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">first</span>, </span><span class=\"param\"><span class=\"n\">last</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.copy", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.copy", "kind": "function", "doc": "<p>Makes a copy of this range object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.is_suffix", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.is_suffix", "kind": "function", "doc": "<p>Returns True if this is a suffix range.</p>\n\n<p>A suffix range is one that specifies the last N bytes of a\nfile regardless of file size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.is_fixed", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.is_fixed", "kind": "function", "doc": "<p>Returns True if this range is absolute and a fixed size.</p>\n\n<p>This occurs only if neither first or last is None.  Converse\nis the is_unbounded() method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.is_unbounded", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.is_unbounded", "kind": "function", "doc": "<p>Returns True if the number of bytes in the range is unspecified.</p>\n\n<p>This can only occur if either the 'first' or the 'last' member\nis None.  Converse is the is_fixed() method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.is_whole_file", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.is_whole_file", "kind": "function", "doc": "<p>Returns True if this range includes all possible bytes.</p>\n\n<p>This can only occur if the 'last' member is None and the first\nmember is 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.fix_to_size", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.fix_to_size", "kind": "function", "doc": "<p>Changes a length-relative range to an absolute range based upon given file size.</p>\n\n<p>Ranges that are already absolute are left as is.</p>\n\n<p>Note that zero-length files are handled as special cases,\nsince the only way possible to specify a zero-length range is\nwith the suffix range \"-0\".  Thus unless this range is a suffix\nrange, it can not satisfy a zero-length file.</p>\n\n<p>If the resulting range (partly) lies outside the file size then an\nerror is raised.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.merge_with", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.merge_with", "kind": "function", "doc": "<p>Tries to merge the given range into this one.</p>\n\n<p>The size of this range may be enlarged as a result.</p>\n\n<p>An error is raised if the two ranges do not overlap or are not\ncontiguous with each other.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.first", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.first", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.range_spec.last", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_spec.last", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.range_set", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set", "kind": "class", "doc": "<p>A collection of range_specs, with units (e.g., bytes).</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.range_set.units", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.units", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.range_set.range_specs", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.range_specs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.range_set.from_str", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.from_str", "kind": "function", "doc": "<p>Sets this range set based upon a string, such as the Range: header.</p>\n\n<p>You can also use the parse_range_set() function for more control.</p>\n\n<p>If a parsing error occurs, the pre-exising value of this range\nset is left unchanged.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">valid_units</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;bytes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_set.is_single_range", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.is_single_range", "kind": "function", "doc": "<p>Does this range specifier consist of only a single range set?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_set.is_contiguous", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.is_contiguous", "kind": "function", "doc": "<p>Can the collection of range_specs be coalesced into a single contiguous range?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_set.fix_to_size", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.fix_to_size", "kind": "function", "doc": "<p>Changes all length-relative range_specs to absolute range_specs based upon given file size.\nIf none of the range_specs in this set can be satisfied, then the\nentire set is considered unsatifiable and an error is raised.\nOtherwise any unsatisfiable range_specs will simply be removed\nfrom this set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.range_set.coalesce", "modulename": "pyRdfa.extras.httpheader", "qualname": "range_set.coalesce", "kind": "function", "doc": "<p>Collapses all consecutive range_specs which together define a contiguous range.</p>\n\n<p>Note though that this method will not re-sort the range_specs, so a\npotentially contiguous range may not be collapsed if they are\nnot sorted.  For example the ranges:\n    10-20, 30-40, 20-30\nwill not be collapsed to just 10-40.  However if the ranges are\nsorted first as with:\n    10-20, 20-30, 30-40\nthen they will collapse to 10-40.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_number", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_number", "kind": "function", "doc": "<p>Parses a positive decimal integer number from the string.</p>\n\n<p>A tuple is returned (number, chars_consumed).  If the\nstring is not a valid decimal number, then (None,0) is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_range_spec", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_range_spec", "kind": "function", "doc": "<p>Parses a (byte) range_spec.</p>\n\n<p>Returns a tuple (range_spec, chars_consumed).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_range_header", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_range_header", "kind": "function", "doc": "<p>Parses the value of an HTTP Range: header.</p>\n\n<p>The value of the header as a string should be passed in; without\nthe header name itself.</p>\n\n<p>Returns a range_set object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">header_value</span>, </span><span class=\"param\"><span class=\"n\">valid_units</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;bytes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_range_set", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_range_set", "kind": "function", "doc": "<p>Parses a (byte) range set specifier.</p>\n\n<p>Returns a tuple (range_set, chars_consumed).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">valid_units</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;bytes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_qvalue_accept_list", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_qvalue_accept_list", "kind": "function", "doc": "<p>Parses any of the Accept-* style headers with quality factors.</p>\n\n<p>This is a low-level function.  It returns a list of tuples, each like:\n   (item, item_parms, qvalue, accept_parms)</p>\n\n<p>You can pass in a function which parses each of the item strings, or\naccept the default where the items must be simple tokens.  Note that\nyour parser should not consume any paramters (past the special \"q\"\nparamter anyway).</p>\n\n<p>The item_parms and accept_parms are each lists of (name,value) tuples.</p>\n\n<p>The qvalue is the quality factor, a number from 0 to 1 inclusive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">item_parser</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">parse_token</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_accept_header", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_accept_header", "kind": "function", "doc": "<p>Parses the Accept: header.</p>\n\n<p>The value of the header as a string should be passed in; without\nthe header name itself.</p>\n\n<p>This will parse the value of any of the HTTP headers \"Accept\",\n\"Accept-Charset\", \"Accept-Encoding\", or \"Accept-Language\".  These\nheaders are similarly formatted, in that they are a list of items\nwith associated quality factors.  The quality factor, or qvalue,\nis a number in the range [0.0..1.0] which indicates the relative\npreference of each item.</p>\n\n<p>This function returns a list of those items, sorted by preference\n(from most-prefered to least-prefered).  Each item in the returned\nlist is actually a tuple consisting of:</p>\n\n<p>( item_name, item_parms, qvalue, accept_parms )</p>\n\n<p>As an example, the following string,\n    text/plain; charset=\"utf-8\"; q=.5; columns=80\nwould be parsed into this resulting tuple,\n    ( 'text/plain', [('charset','utf-8')], 0.5, [('columns','80')] )</p>\n\n<p>The value of the returned item_name depends upon which header is\nbeing parsed, but for example it may be a MIME content or media\ntype (without parameters), a language tag, or so on.  Any optional\nparameters (delimited by semicolons) occuring before the \"q=\"\nattribute will be in the item_parms list as (attribute,value)\ntuples in the same order as they appear in the header.  Any quoted\nvalues will have been unquoted and unescaped.</p>\n\n<p>The qvalue is a floating point number in the inclusive range 0.0\nto 1.0, and roughly indicates the preference for this item.\nValues outside this range will be capped to the closest extreme.</p>\n\n<pre><code> (!) Note that a qvalue of 0 indicates that the item is\n explicitly NOT acceptable to the user agent, and should be\n handled differently by the caller.\n</code></pre>\n\n<p>The accept_parms, like the item_parms, is a list of any attributes\noccuring after the \"q=\" attribute, and will be in the list as\n(attribute,value) tuples in the same order as they occur.\nUsually accept_parms will be an empty list, as the HTTP spec\nallows these extra parameters in the syntax but does not\ncurrently define any possible values.</p>\n\n<p>All empty items will be removed from the list.  However, duplicate\nor conflicting values are not detected or handled in any way by\nthis function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">header_value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_media_type", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_media_type", "kind": "function", "doc": "<p>Parses a media type (MIME type) designator into it's parts.</p>\n\n<p>Given a media type string, returns a nested tuple of it's parts.</p>\n\n<pre><code>((major,minor,parmlist), chars_consumed)\n</code></pre>\n\n<p>where parmlist is a list of tuples of (parm_name, parm_value).\nQuoted-values are appropriately unquoted and unescaped.</p>\n\n<p>If 'with_parameters' is False, then parsing will stop immediately\nafter the minor media type; and will not proceed to parse any\nof the semicolon-separated paramters.</p>\n\n<p>Examples:\n    image/png -> (('image','png',[]), 9)\n    text/plain; charset=\"utf-16be\"\n              -> (('text','plain',[('charset,'utf-16be')]), 30)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">media_type</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">with_parameters</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_parameter_list", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_parameter_list", "kind": "function", "doc": "<p>Parses a semicolon-separated 'parameter=value' list.</p>\n\n<p>Returns a tuple (parmlist, chars_consumed), where parmlist\nis a list of tuples (parm_name, parm_value).</p>\n\n<p>The parameter values will be unquoted and unescaped as needed.</p>\n\n<p>Empty parameters (as in \";;\") are skipped, as is insignificant\nwhite space.  The list returned is kept in the same order as the\nparameters appear in the string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_type", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type", "kind": "class", "doc": "<p>This class represents a media type (aka a MIME content type), including parameters.</p>\n\n<p>You initialize these by passing in a content-type declaration\nstring, such as \"text/plain; charset=ascii\", to the constructor or\nto the set() method.  If you provide no string value, the object\nreturned will represent the wildcard <em>/</em> content type.</p>\n\n<p>Normally you will get the value back by using str(), or optionally\nyou can access the components via the 'major', 'minor', 'media_type',\nor 'parmdict' members.</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.content_type.__init__", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.__init__", "kind": "function", "doc": "<p>Create a new content_type object.</p>\n\n<p>See the set() method for a description of the arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content_type_string</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">with_parameters</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pyRdfa.extras.httpheader.content_type.set_parameters", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.set_parameters", "kind": "function", "doc": "<p>Sets the optional paramters based upon the parameter list.</p>\n\n<p>The paramter list should be a semicolon-separated name=value string.\nAny paramters which already exist on this object will be deleted,\nunless they appear in the given paramter_list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameter_list_or_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_type.set", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.set", "kind": "function", "doc": "<p>Parses the content type string and sets this object to it's value.</p>\n\n<p>For a more complete description of the arguments, see the\ndocumentation for the parse_media_type() function in this module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content_type_string</span>, </span><span class=\"param\"><span class=\"n\">with_parameters</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_type.major", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.major", "kind": "variable", "doc": "<p>Major media classification</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.content_type.minor", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.minor", "kind": "variable", "doc": "<p>Minor media sub-classification</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.content_type.media_type", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.media_type", "kind": "variable", "doc": "<p>Returns the media 'type/subtype' string, without parameters.</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.content_type.is_wildcard", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.is_wildcard", "kind": "function", "doc": "<p>Returns True if this is a 'something/*' media type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_type.is_universal_wildcard", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.is_universal_wildcard", "kind": "function", "doc": "<p>Returns True if this is the unspecified '<em>/</em>' media type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_type.is_composite", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.is_composite", "kind": "function", "doc": "<p>Is this media type composed of multiple parts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_type.is_xml", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_type.is_xml", "kind": "function", "doc": "<p>Returns True if this media type is XML-based.</p>\n\n<p>Note this does not consider text/html to be XML, but\napplication/xhtml+xml is.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.content_formdata", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_formdata", "kind": "variable", "doc": "<p></p>\n", "default_value": "content_type(&#x27;multipart/form-data&#x27;)"}, {"fullname": "pyRdfa.extras.httpheader.content_urlencoded", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_urlencoded", "kind": "variable", "doc": "<p></p>\n", "default_value": "content_type(&#x27;application/x-www-form-urlencoded&#x27;)"}, {"fullname": "pyRdfa.extras.httpheader.content_byteranges", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_byteranges", "kind": "variable", "doc": "<p></p>\n", "default_value": "content_type(&#x27;multipart/byteranges&#x27;)"}, {"fullname": "pyRdfa.extras.httpheader.content_opaque", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_opaque", "kind": "variable", "doc": "<p></p>\n", "default_value": "content_type(&#x27;application/octet-stream&#x27;)"}, {"fullname": "pyRdfa.extras.httpheader.content_html", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_html", "kind": "variable", "doc": "<p></p>\n", "default_value": "content_type(&#x27;text/html&#x27;)"}, {"fullname": "pyRdfa.extras.httpheader.content_xhtml", "modulename": "pyRdfa.extras.httpheader", "qualname": "content_xhtml", "kind": "variable", "doc": "<p></p>\n", "default_value": "content_type(&#x27;application/xhtml+xml&#x27;)"}, {"fullname": "pyRdfa.extras.httpheader.acceptable_content_type", "modulename": "pyRdfa.extras.httpheader", "qualname": "acceptable_content_type", "kind": "function", "doc": "<p>Determines if the given content type is acceptable to the user agent.</p>\n\n<p>The accept_header should be the value present in the HTTP\n\"Accept:\" header.  In mod_python this is typically obtained from\nthe req.http_headers_in table; in WSGI it is environ[\"Accept\"];\nother web frameworks may provide other methods of obtaining it.</p>\n\n<p>Optionally the accept_header parameter can be pre-parsed, as\nreturned from the parse_accept_header() function in this module.</p>\n\n<p>The content_types argument should either be a single MIME media\ntype string, or a sequence of them.  It represents the set of\ncontent types that the caller (server) is willing to send.\nGenerally, the server content_types should not contain any\nwildcarded values.</p>\n\n<p>This function determines which content type which is the most\npreferred and is acceptable to both the user agent and the server.\nIf one is negotiated it will return a four-valued tuple like:</p>\n\n<pre><code>(server_content_type, ua_content_range, qvalue, accept_parms)\n</code></pre>\n\n<p>The first tuple value is one of the server's content_types, while\nthe remaining tuple values descript which of the client's\nacceptable content_types was matched.  In most cases accept_parms\nwill be an empty list (see description of parse_accept_header()\nfor more details).</p>\n\n<p>If no content type could be negotiated, then this function will\nreturn None (and the caller should typically cause an HTTP 406 Not\nAcceptable as a response).</p>\n\n<p>Note that the wildcarded content type \"<em>/</em>\" sent by the client\nwill be ignored, since it is often incorrectly sent by web\nbrowsers that don't really mean it.  To override this, call with\nignore_wildcard=False.  Partial wildcards such as \"image/*\" will\nalways be processed, but be at a lower priority than a complete\nmatching type.</p>\n\n<p>See also: RFC 2616 section 14.1, and\n<a href=\"http://www.iana.org/assignments/media-types/\">http://www.iana.org/assignments/media-types/</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">accept_header</span>, </span><span class=\"param\"><span class=\"n\">content_types</span>, </span><span class=\"param\"><span class=\"n\">ignore_wildcard</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.character_set_aliases", "modulename": "pyRdfa.extras.httpheader", "qualname": "character_set_aliases", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ASCII&#x27;: &#x27;US-ASCII&#x27;, &#x27;ISO646-US&#x27;: &#x27;US-ASCII&#x27;, &#x27;IBM367&#x27;: &#x27;US-ASCII&#x27;, &#x27;CP367&#x27;: &#x27;US-ASCII&#x27;, &#x27;CSASCII&#x27;: &#x27;US-ASCII&#x27;, &#x27;ANSI_X3.4-1968&#x27;: &#x27;US-ASCII&#x27;, &#x27;ISO_646.IRV:1991&#x27;: &#x27;US-ASCII&#x27;, &#x27;UTF7&#x27;: &#x27;UTF-7&#x27;, &#x27;UTF8&#x27;: &#x27;UTF-8&#x27;, &#x27;UTF16&#x27;: &#x27;UTF-16&#x27;, &#x27;UTF16LE&#x27;: &#x27;UTF-16LE&#x27;, &#x27;UTF16BE&#x27;: &#x27;UTF-16BE&#x27;, &#x27;UTF32&#x27;: &#x27;UTF-32&#x27;, &#x27;UTF32LE&#x27;: &#x27;UTF-32LE&#x27;, &#x27;UTF32BE&#x27;: &#x27;UTF-32BE&#x27;, &#x27;UCS2&#x27;: &#x27;ISO-10646-UCS-2&#x27;, &#x27;UCS_2&#x27;: &#x27;ISO-10646-UCS-2&#x27;, &#x27;UCS-2&#x27;: &#x27;ISO-10646-UCS-2&#x27;, &#x27;CSUNICODE&#x27;: &#x27;ISO-10646-UCS-2&#x27;, &#x27;UCS4&#x27;: &#x27;ISO-10646-UCS-4&#x27;, &#x27;UCS_4&#x27;: &#x27;ISO-10646-UCS-4&#x27;, &#x27;UCS-4&#x27;: &#x27;ISO-10646-UCS-4&#x27;, &#x27;CSUCS4&#x27;: &#x27;ISO-10646-UCS-4&#x27;, &#x27;ISO_8859-1&#x27;: &#x27;ISO-8859-1&#x27;, &#x27;LATIN1&#x27;: &#x27;ISO-8859-1&#x27;, &#x27;CP819&#x27;: &#x27;ISO-8859-1&#x27;, &#x27;IBM819&#x27;: &#x27;ISO-8859-1&#x27;, &#x27;ISO_8859-2&#x27;: &#x27;ISO-8859-2&#x27;, &#x27;LATIN2&#x27;: &#x27;ISO-8859-2&#x27;, &#x27;ISO_8859-3&#x27;: &#x27;ISO-8859-3&#x27;, &#x27;LATIN3&#x27;: &#x27;ISO-8859-3&#x27;, &#x27;ISO_8859-4&#x27;: &#x27;ISO-8859-4&#x27;, &#x27;LATIN4&#x27;: &#x27;ISO-8859-4&#x27;, &#x27;ISO_8859-5&#x27;: &#x27;ISO-8859-5&#x27;, &#x27;CYRILLIC&#x27;: &#x27;ISO-8859-5&#x27;, &#x27;ISO_8859-6&#x27;: &#x27;ISO-8859-6&#x27;, &#x27;ARABIC&#x27;: &#x27;ISO-8859-6&#x27;, &#x27;ECMA-114&#x27;: &#x27;ISO-8859-6&#x27;, &#x27;ISO_8859-6-E&#x27;: &#x27;ISO-8859-6-E&#x27;, &#x27;ISO_8859-6-I&#x27;: &#x27;ISO-8859-6-I&#x27;, &#x27;ISO_8859-7&#x27;: &#x27;ISO-8859-7&#x27;, &#x27;GREEK&#x27;: &#x27;ISO-8859-7&#x27;, &#x27;GREEK8&#x27;: &#x27;ISO-8859-7&#x27;, &#x27;ECMA-118&#x27;: &#x27;ISO-8859-7&#x27;, &#x27;ISO_8859-8&#x27;: &#x27;ISO-8859-8&#x27;, &#x27;HEBREW&#x27;: &#x27;ISO-8859-8&#x27;, &#x27;ISO_8859-8-E&#x27;: &#x27;ISO-8859-8-E&#x27;, &#x27;ISO_8859-8-I&#x27;: &#x27;ISO-8859-8-I&#x27;, &#x27;ISO_8859-9&#x27;: &#x27;ISO-8859-9&#x27;, &#x27;LATIN5&#x27;: &#x27;ISO-8859-9&#x27;, &#x27;ISO_8859-10&#x27;: &#x27;ISO-8859-10&#x27;, &#x27;LATIN6&#x27;: &#x27;ISO-8859-10&#x27;, &#x27;ISO_8859-13&#x27;: &#x27;ISO-8859-13&#x27;, &#x27;ISO_8859-14&#x27;: &#x27;ISO-8859-14&#x27;, &#x27;LATIN8&#x27;: &#x27;ISO-8859-14&#x27;, &#x27;ISO_8859-15&#x27;: &#x27;ISO-8859-15&#x27;, &#x27;LATIN9&#x27;: &#x27;ISO-8859-15&#x27;, &#x27;ISO_8859-16&#x27;: &#x27;ISO-8859-16&#x27;, &#x27;LATIN10&#x27;: &#x27;ISO-8859-16&#x27;}"}, {"fullname": "pyRdfa.extras.httpheader.canonical_charset", "modulename": "pyRdfa.extras.httpheader", "qualname": "canonical_charset", "kind": "function", "doc": "<p>Returns the canonical or preferred name of a charset.</p>\n\n<p>Additional character sets can be recognized by this function by\naltering the character_set_aliases dictionary in this module.\nCharsets which are not recognized are simply converted to\nupper-case (as charset names are always case-insensitive).</p>\n\n<p>See <a href=\"http://www.iana.org/assignments/character-sets\">http://www.iana.org/assignments/character-sets</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">charset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.acceptable_charset", "modulename": "pyRdfa.extras.httpheader", "qualname": "acceptable_charset", "kind": "function", "doc": "<p>Determines if the given charset is acceptable to the user agent.</p>\n\n<p>The accept_charset_header should be the value present in the HTTP\n\"Accept-Charset:\" header.  In mod_python this is typically\nobtained from the req.http_headers table; in WSGI it is\nenviron[\"Accept-Charset\"]; other web frameworks may provide other\nmethods of obtaining it.</p>\n\n<p>Optionally the accept_charset_header parameter can instead be the\nlist returned from the parse_accept_header() function in this\nmodule.</p>\n\n<p>The charsets argument should either be a charset identifier string,\nor a sequence of them.</p>\n\n<p>This function returns the charset identifier string which is the\nmost prefered and is acceptable to both the user agent and the\ncaller.  It will return the default value if no charset is negotiable.</p>\n\n<p>Note that the wildcarded charset \"*\" will be ignored.  To override\nthis, call with ignore_wildcard=False.</p>\n\n<p>See also: RFC 2616 section 14.2, and\n<a href=\"http://www.iana.org/assignments/character-sets\">http://www.iana.org/assignments/character-sets</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">accept_charset_header</span>,</span><span class=\"param\">\t<span class=\"n\">charsets</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_wildcard</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;ISO-8859-1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.language_tag", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag", "kind": "class", "doc": "<p>This class represents an RFC 3066 language tag.</p>\n\n<p>Initialize objects of this class with a single string representing\nthe language tag, such as \"en-US\".</p>\n\n<p>Case is insensitive. Wildcarded subtags are ignored or stripped as\nthey have no significance, so that \"en-<em>\" is the same as \"en\".\nHowever the universal wildcard \"</em>\" language tag is kept as-is.</p>\n\n<p>Note that although relational operators such as &lt; are defined,\nthey only form a partial order based upon specialization.</p>\n\n<p>Thus for example,\n     \"en\" &lt;= \"en-US\"\nbut,\n     not \"en\" &lt;= \"de\", and\n     not \"de\" &lt;= \"en\".</p>\n"}, {"fullname": "pyRdfa.extras.httpheader.language_tag.__init__", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag.__init__", "kind": "function", "doc": "<p>Initialize objects of this class with a single string representing\nthe language tag, such as \"en-US\".  Case is insensitive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tagname</span></span>)</span>"}, {"fullname": "pyRdfa.extras.httpheader.language_tag.parts", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag.parts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.extras.httpheader.language_tag.superior", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag.superior", "kind": "function", "doc": "<p>Returns another instance of language_tag which is the superior.</p>\n\n<p>Thus en-US gives en, and en gives *.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.language_tag.all_superiors", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag.all_superiors", "kind": "function", "doc": "<p>Returns a list of this language and all it's superiors.</p>\n\n<p>If include_wildcard is False, then \"<em>\" will not be among the\noutput list, unless this language is itself \"</em>\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">include_wildcard</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.language_tag.is_universal_wildcard", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag.is_universal_wildcard", "kind": "function", "doc": "<p>Returns True if this language tag represents all possible\nlanguages, by using the reserved tag of \"*\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.language_tag.dialect_of", "modulename": "pyRdfa.extras.httpheader", "qualname": "language_tag.dialect_of", "kind": "function", "doc": "<p>Is this language a dialect (or subset/specialization) of another.</p>\n\n<p>This method returns True if this language is the same as or a\nspecialization (dialect) of the other language_tag.</p>\n\n<p>If ignore_wildcard is False, then all languages will be\nconsidered to be a dialect of the special language tag of \"*\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">ignore_wildcard</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.parse_accept_language_header", "modulename": "pyRdfa.extras.httpheader", "qualname": "parse_accept_language_header", "kind": "function", "doc": "<p>Parses the Accept-Language header.</p>\n\n<p>Returns a list of tuples, each like:</p>\n\n<pre><code>(language_tag, qvalue, accept_parameters)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">header_value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.extras.httpheader.acceptable_language", "modulename": "pyRdfa.extras.httpheader", "qualname": "acceptable_language", "kind": "function", "doc": "<p>Determines if the given language is acceptable to the user agent.</p>\n\n<p>The accept_header should be the value present in the HTTP\n\"Accept-Language:\" header.  In mod_python this is typically\nobtained from the req.http_headers_in table; in WSGI it is\nenviron[\"Accept-Language\"]; other web frameworks may provide other\nmethods of obtaining it.</p>\n\n<p>Optionally the accept_header parameter can be pre-parsed, as\nreturned by the parse_accept_language_header() function defined in\nthis module.</p>\n\n<p>The server_languages argument should either be a single language\nstring, a language_tag object, or a sequence of them.  It\nrepresents the set of languages that the server is willing to\nsend to the user agent.</p>\n\n<p>Note that the wildcarded language tag \"*\" will be ignored.  To\noverride this, call with ignore_wildcard=False, and even then\nit will be the lowest-priority choice regardless of it's\nquality factor (as per HTTP spec).</p>\n\n<p>If the assume_superiors is True then it the languages that the\nbrowser accepts will automatically include all superior languages.\nAny superior languages which must be added are done so with one\nhalf the qvalue of the language which is present.  For example, if\nthe accept string is \"en-US\", then it will be treated as if it\nwere \"en-US, en;q=0.5\".  Note that although the HTTP 1.1 spec says\nthat browsers are supposed to encourage users to configure all\nacceptable languages, sometimes they don't, thus the ability\nfor this function to assume this.  But setting assume_superiors\nto False will insure strict adherence to the HTTP 1.1 spec; which\nmeans that if the browser accepts \"en-US\", then it will not\nbe acceptable to send just \"en\" to it.</p>\n\n<p>This function returns the language which is the most prefered and\nis acceptable to both the user agent and the caller.  It will\nreturn None if no language is negotiable, otherwise the return\nvalue is always an instance of language_tag.</p>\n\n<p>See also: RFC 3066 <a href=\"http://www.ietf.org/rfc/rfc3066.txt\">http://www.ietf.org/rfc/rfc3066.txt</a>, and\nISO 639, links at <a href=\"http://en.wikipedia.org/wiki/ISO_639\">http://en.wikipedia.org/wiki/ISO_639</a>, and\n<a href=\"http://www.iana.org/assignments/language-tags\">http://www.iana.org/assignments/language-tags</a>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">accept_header</span>,</span><span class=\"param\">\t<span class=\"n\">server_languages</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_wildcard</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">assume_superiors</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.host", "modulename": "pyRdfa.host", "kind": "module", "doc": "<p>Host language sub-package for the pyRdfa package. It contains variables and possible modules necessary to manage various RDFa\nhost languages.</p>\n\n<p>This module may have to be modified if a new host language is added to the system. In many cases the rdfa_core as a host language is enough, because there is no need for a special processing. However, some host languages may require an initial context, or their value may control some transformations, in which case additional data have to be added to this module. This module header contains all tables and arrays to be adapted, and the module content may contain specific transformation methods.</p>\n\n<p>@summary: RDFa Host package\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>} version 5 or higher\n@requires: Python version 2.7 or 3.8 or higher\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n\n<p>@var content_to_host_language: a dictionary mapping a media type to a host language\n@var preferred_suffixes: mapping from preferred suffixes for media types; used if the file is local, ie, there is not HTTP return value for the media type. It corresponds to the preferred suffix in the media type registration\n@var initial_contexts: mapping from host languages to list of initial contexts\n@var accept_xml_base: list of host languages that accept the xml:base attribute for base setting\n@var accept_xml_lang: list of host languages that accept the xml:lang attribute for language setting. Note that XHTML and HTML have some special rules, and those are hard coded...\n@var warn_xmlns_usage: list of host languages that should generate a warning for the usage of @xmlns (for RDFa 1.1)\n@var accept_embedded_rdf_xml: list of host languages that might also include RDF data using an embedded RDF/XML (e.g., SVG). That RDF data may be merged with the output\n@var accept_embedded_turtle: list of host languages that might also include RDF data using a C{script} element. That RDF data may be merged with the output\n@var require_embedded_rdf: list of languages that must accept embedded RDF, ie, the corresponding option is irrelevant\n@var host_dom_transforms: dictionary mapping a host language to an array of methods that are invoked at the beginning of the parsing process for a specific node. That function can do a last minute change on that DOM node, eg, adding or modifying an attribute. The method's signature is (node, state), where node is the DOM node, and state is the L{Execution context<pyRdfa.state.ExecutionContext>}.\n@var predefined_1_0_rel: terms that are hardcoded for HTML+RDF1.0 and replace the initial context for that version\n@var beautifying_prefixes: this is really just to make the output more attractive: for each media type a dictionary of prefix-URI pairs that can be used to make the terms look better...\n@var default_vocabulary: as its name suggests, default @vocab value for a specific host language</p>\n"}, {"fullname": "pyRdfa.host.HostLanguage", "modulename": "pyRdfa.host", "qualname": "HostLanguage", "kind": "class", "doc": "<p>An enumeration style class: recognized host language types for this processor of RDFa. Some processing details may depend on these host languages. \"rdfa_core\" is the default Host Language is nothing else is defined.</p>\n"}, {"fullname": "pyRdfa.host.HostLanguage.rdfa_core", "modulename": "pyRdfa.host", "qualname": "HostLanguage.rdfa_core", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RDFa Core&#x27;"}, {"fullname": "pyRdfa.host.HostLanguage.xhtml", "modulename": "pyRdfa.host", "qualname": "HostLanguage.xhtml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;XHTML+RDFa&#x27;"}, {"fullname": "pyRdfa.host.HostLanguage.xhtml5", "modulename": "pyRdfa.host", "qualname": "HostLanguage.xhtml5", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;XHTML5+RDFa&#x27;"}, {"fullname": "pyRdfa.host.HostLanguage.html5", "modulename": "pyRdfa.host", "qualname": "HostLanguage.html5", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;HTML5+RDFa&#x27;"}, {"fullname": "pyRdfa.host.HostLanguage.atom", "modulename": "pyRdfa.host", "qualname": "HostLanguage.atom", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Atom+RDFa&#x27;"}, {"fullname": "pyRdfa.host.HostLanguage.svg", "modulename": "pyRdfa.host", "qualname": "HostLanguage.svg", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;SVG+RDFa&#x27;"}, {"fullname": "pyRdfa.host.initial_contexts", "modulename": "pyRdfa.host", "qualname": "initial_contexts", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;XHTML+RDFa&#x27;: [&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;, &#x27;http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1&#x27;], &#x27;XHTML5+RDFa&#x27;: [&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;], &#x27;HTML5+RDFa&#x27;: [&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;], &#x27;RDFa Core&#x27;: [&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;], &#x27;Atom+RDFa&#x27;: [&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;], &#x27;SVG+RDFa&#x27;: [&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;]}"}, {"fullname": "pyRdfa.host.beautifying_prefixes", "modulename": "pyRdfa.host", "qualname": "beautifying_prefixes", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;XHTML+RDFa&#x27;: {&#x27;xhv&#x27;: &#x27;http://www.w3.org/1999/xhtml/vocab#&#x27;}, &#x27;Atom+RDFa&#x27;: {&#x27;atomrel&#x27;: &#x27;http://www.iana.org/assignments/relation/&#x27;}}"}, {"fullname": "pyRdfa.host.accept_xml_base", "modulename": "pyRdfa.host", "qualname": "accept_xml_base", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;RDFa Core&#x27;, &#x27;Atom+RDFa&#x27;, &#x27;SVG+RDFa&#x27;, &#x27;XHTML5+RDFa&#x27;]"}, {"fullname": "pyRdfa.host.accept_xml_lang", "modulename": "pyRdfa.host", "qualname": "accept_xml_lang", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;RDFa Core&#x27;, &#x27;Atom+RDFa&#x27;, &#x27;SVG+RDFa&#x27;]"}, {"fullname": "pyRdfa.host.accept_embedded_rdf_xml", "modulename": "pyRdfa.host", "qualname": "accept_embedded_rdf_xml", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;SVG+RDFa&#x27;, &#x27;RDFa Core&#x27;]"}, {"fullname": "pyRdfa.host.accept_embedded_turtle", "modulename": "pyRdfa.host", "qualname": "accept_embedded_turtle", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;SVG+RDFa&#x27;, &#x27;HTML5+RDFa&#x27;, &#x27;XHTML5+RDFa&#x27;, &#x27;XHTML+RDFa&#x27;]"}, {"fullname": "pyRdfa.host.require_embedded_rdf", "modulename": "pyRdfa.host", "qualname": "require_embedded_rdf", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;SVG+RDFa&#x27;]"}, {"fullname": "pyRdfa.host.warn_xmlns_usage", "modulename": "pyRdfa.host", "qualname": "warn_xmlns_usage", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;HTML5+RDFa&#x27;, &#x27;XHTML5+RDFa&#x27;, &#x27;XHTML+RDFa&#x27;]"}, {"fullname": "pyRdfa.host.host_dom_transforms", "modulename": "pyRdfa.host", "qualname": "host_dom_transforms", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Atom+RDFa&#x27;: [&lt;function atom_add_entry_type&gt;], &#x27;HTML5+RDFa&#x27;: [&lt;function html5_extra_attributes&gt;, &lt;function remove_rel&gt;], &#x27;XHTML5+RDFa&#x27;: [&lt;function html5_extra_attributes&gt;, &lt;function remove_rel&gt;]}"}, {"fullname": "pyRdfa.host.default_vocabulary", "modulename": "pyRdfa.host", "qualname": "default_vocabulary", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Atom+RDFa&#x27;: &#x27;http://www.iana.org/assignments/relation/&#x27;}"}, {"fullname": "pyRdfa.host.predefined_1_0_rel", "modulename": "pyRdfa.host", "qualname": "predefined_1_0_rel", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;alternate&#x27;, &#x27;appendix&#x27;, &#x27;cite&#x27;, &#x27;bookmark&#x27;, &#x27;chapter&#x27;, &#x27;contents&#x27;, &#x27;copyright&#x27;, &#x27;glossary&#x27;, &#x27;help&#x27;, &#x27;icon&#x27;, &#x27;index&#x27;, &#x27;meta&#x27;, &#x27;next&#x27;, &#x27;p3pv1&#x27;, &#x27;prev&#x27;, &#x27;previous&#x27;, &#x27;role&#x27;, &#x27;section&#x27;, &#x27;subsection&#x27;, &#x27;start&#x27;, &#x27;license&#x27;, &#x27;up&#x27;, &#x27;last&#x27;, &#x27;stylesheet&#x27;, &#x27;first&#x27;, &#x27;top&#x27;]"}, {"fullname": "pyRdfa.host.MediaTypes", "modulename": "pyRdfa.host", "qualname": "MediaTypes", "kind": "class", "doc": "<p>An enumeration style class: some common media types (better have them at one place to avoid misstyping...)</p>\n"}, {"fullname": "pyRdfa.host.MediaTypes.rdfxml", "modulename": "pyRdfa.host", "qualname": "MediaTypes.rdfxml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;application/rdf+xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.turtle", "modulename": "pyRdfa.host", "qualname": "MediaTypes.turtle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;text/turtle&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.html", "modulename": "pyRdfa.host", "qualname": "MediaTypes.html", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;text/html&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.xhtml", "modulename": "pyRdfa.host", "qualname": "MediaTypes.xhtml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;application/xhtml+xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.svg", "modulename": "pyRdfa.host", "qualname": "MediaTypes.svg", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;application/svg+xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.svgi", "modulename": "pyRdfa.host", "qualname": "MediaTypes.svgi", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;image/svg+xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.smil", "modulename": "pyRdfa.host", "qualname": "MediaTypes.smil", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;application/smil+xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.atom", "modulename": "pyRdfa.host", "qualname": "MediaTypes.atom", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;application/atom+xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.xml", "modulename": "pyRdfa.host", "qualname": "MediaTypes.xml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;application/xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.xmlt", "modulename": "pyRdfa.host", "qualname": "MediaTypes.xmlt", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;text/xml&#x27;"}, {"fullname": "pyRdfa.host.MediaTypes.nt", "modulename": "pyRdfa.host", "qualname": "MediaTypes.nt", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;text/plain&#x27;"}, {"fullname": "pyRdfa.host.content_to_host_language", "modulename": "pyRdfa.host", "qualname": "content_to_host_language", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;text/html&#x27;: &#x27;HTML5+RDFa&#x27;, &#x27;application/xhtml+xml&#x27;: &#x27;XHTML+RDFa&#x27;, &#x27;application/xml&#x27;: &#x27;RDFa Core&#x27;, &#x27;text/xml&#x27;: &#x27;RDFa Core&#x27;, &#x27;application/smil+xml&#x27;: &#x27;RDFa Core&#x27;, &#x27;application/svg+xml&#x27;: &#x27;SVG+RDFa&#x27;, &#x27;image/svg+xml&#x27;: &#x27;SVG+RDFa&#x27;, &#x27;application/atom+xml&#x27;: &#x27;Atom+RDFa&#x27;}"}, {"fullname": "pyRdfa.host.preferred_suffixes", "modulename": "pyRdfa.host", "qualname": "preferred_suffixes", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;.rdf&#x27;: &#x27;application/rdf+xml&#x27;, &#x27;.ttl&#x27;: &#x27;text/turtle&#x27;, &#x27;.n3&#x27;: &#x27;text/turtle&#x27;, &#x27;.owl&#x27;: &#x27;application/rdf+xml&#x27;, &#x27;.html&#x27;: &#x27;text/html&#x27;, &#x27;.shtml&#x27;: &#x27;text/html&#x27;, &#x27;.xhtml&#x27;: &#x27;application/xhtml+xml&#x27;, &#x27;.svg&#x27;: &#x27;application/svg+xml&#x27;, &#x27;.smil&#x27;: &#x27;application/smil+xml&#x27;, &#x27;.xml&#x27;: &#x27;application/xml&#x27;, &#x27;.nt&#x27;: &#x27;text/plain&#x27;, &#x27;.atom&#x27;: &#x27;application/atom+xml&#x27;}"}, {"fullname": "pyRdfa.host.adjust_html_version", "modulename": "pyRdfa.host", "qualname": "adjust_html_version", "kind": "function", "doc": "<p>Adjust the rdfa_version based on the (possible) DTD\n@param stream: the data stream that has to be parsed by an xml parser\n@param rdfa_version: the current rdfa_version; will be returned if nothing else is found\n@return: the rdfa_version, either \"1.0\" or \"1.1, if the DTD says so, otherwise the input rdfa_version value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stream</span>, </span><span class=\"param\"><span class=\"n\">rdfa_version</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.host.adjust_xhtml_and_version", "modulename": "pyRdfa.host", "qualname": "adjust_xhtml_and_version", "kind": "function", "doc": "<p>Check if the xhtml+RDFa is really XHTML 0 or 1 or whether it should be considered as XHTML5. This is done\nby looking at the DTD. Furthermore, checks whether whether the system id signals an rdfa 1.0, in which case the\nversion is also set.</p>\n\n<p>@param dom: top level DOM node\n@param incoming_language: host language to be checked; the whole check is relevant for xhtml only.\n@param rdfa_version: rdfa_version as known by the caller\n@return: a tuple of the possibly modified host language (ie, set to XHTML5) and the possibly modified rdfa version (ie, set to \"1.0\", \"1.1\", or the incoming rdfa_version if nothing is found)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">incoming_language</span>, </span><span class=\"param\"><span class=\"n\">rdfa_version</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.host.atom", "modulename": "pyRdfa.host.atom", "kind": "module", "doc": "<p>Simple transfomer for Atom: the C{@typeof=\"\"} is added to the C{<entry>} element (unless something is already there).</p>\n\n<p>@summary: Add a top \"about\" to <head> and <body>\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org</p>\n"}, {"fullname": "pyRdfa.host.atom.atom_add_entry_type", "modulename": "pyRdfa.host.atom", "qualname": "atom_add_entry_type", "kind": "function", "doc": "<p>@param node: the current node that could be modified\n@param state: current state\n@type state: L{Execution context<pyRdfa.state.ExecutionContext>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.host.html5", "modulename": "pyRdfa.host.html5", "kind": "module", "doc": "<p>Simple transfomer for HTML5: add a @src for any @data, add a @content for the @value attribute of the <data> element, and interpret the <time> element.</p>\n\n<p>@summary: Add a top \"about\" to <head> and <body>\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org</p>\n"}, {"fullname": "pyRdfa.host.html5.datetime_type", "modulename": "pyRdfa.host.html5", "qualname": "datetime_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#dateTime&#x27;"}, {"fullname": "pyRdfa.host.html5.time_type", "modulename": "pyRdfa.host.html5", "qualname": "time_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#time&#x27;"}, {"fullname": "pyRdfa.host.html5.date_type", "modulename": "pyRdfa.host.html5", "qualname": "date_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#date&#x27;"}, {"fullname": "pyRdfa.host.html5.date_gYear", "modulename": "pyRdfa.host.html5", "qualname": "date_gYear", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#gYear&#x27;"}, {"fullname": "pyRdfa.host.html5.date_gYearMonth", "modulename": "pyRdfa.host.html5", "qualname": "date_gYearMonth", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#gYearMonth&#x27;"}, {"fullname": "pyRdfa.host.html5.date_gMonthDay", "modulename": "pyRdfa.host.html5", "qualname": "date_gMonthDay", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#gMonthDay&#x27;"}, {"fullname": "pyRdfa.host.html5.duration_type", "modulename": "pyRdfa.host.html5", "qualname": "duration_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/2001/XMLSchema#duration&#x27;"}, {"fullname": "pyRdfa.host.html5.plain", "modulename": "pyRdfa.host.html5", "qualname": "plain", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;plain&#x27;"}, {"fullname": "pyRdfa.host.html5.handled_time_types", "modulename": "pyRdfa.host.html5", "qualname": "handled_time_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;http://www.w3.org/2001/XMLSchema#dateTime&#x27;, &#x27;http://www.w3.org/2001/XMLSchema#time&#x27;, &#x27;http://www.w3.org/2001/XMLSchema#date&#x27;, &#x27;http://www.w3.org/2001/XMLSchema#gYear&#x27;, &#x27;http://www.w3.org/2001/XMLSchema#gYearMonth&#x27;, &#x27;http://www.w3.org/2001/XMLSchema#gMonthDay&#x27;, &#x27;http://www.w3.org/2001/XMLSchema#duration&#x27;]"}, {"fullname": "pyRdfa.host.html5.html5_extra_attributes", "modulename": "pyRdfa.host.html5", "qualname": "html5_extra_attributes", "kind": "function", "doc": "<p>@param node: the current node that could be modified\n@param state: current state\n@type state: L{Execution context<pyRdfa.state.ExecutionContext>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.host.html5.remove_rel", "modulename": "pyRdfa.host.html5", "qualname": "remove_rel", "kind": "function", "doc": "<p>If @property and @rel/@rev are on the same element, then only CURIE and URI can appear as a rel/rev value.</p>\n\n<p>@param node: the current node that could be modified\n@param state: current state\n@type state: L{Execution context<pyRdfa.state.ExecutionContext>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.initialcontext", "modulename": "pyRdfa.initialcontext", "kind": "module", "doc": "<p>Built-in version of the initial contexts for RDFa Core, and RDFa + HTML</p>\n\n<p>@summary: Management of vocabularies, terms, and their mapping to URI-s.\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n\n<p>@var initial_context: dictionary for all the initial context data, keyed through the context URI-s</p>\n"}, {"fullname": "pyRdfa.initialcontext.Wrapper", "modulename": "pyRdfa.initialcontext", "qualname": "Wrapper", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.initialcontext.initial_context", "modulename": "pyRdfa.initialcontext", "qualname": "initial_context", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;http://www.w3.org/2011/rdfa-context/rdfa-1.1&#x27;: &lt;pyRdfa.initialcontext.Wrapper object&gt;, &#x27;http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1&#x27;: &lt;pyRdfa.initialcontext.Wrapper object&gt;}"}, {"fullname": "pyRdfa.options", "modulename": "pyRdfa.options", "kind": "module", "doc": "<p><code>Options</code> class collect the possible options that govern the parsing possibilities. The module also includes the <code>ProcessorGraph</code> class that handles the processor graph, per RDFa 1.1 (i.e., the graph containing errors and warnings).</p>\n"}, {"fullname": "pyRdfa.options.ns_dc", "modulename": "pyRdfa.options", "qualname": "ns_dc", "kind": "variable", "doc": "<p></p>\n", "default_value": "Namespace(&#x27;http://purl.org/dc/terms/&#x27;)"}, {"fullname": "pyRdfa.options.ns_ht", "modulename": "pyRdfa.options", "qualname": "ns_ht", "kind": "variable", "doc": "<p></p>\n", "default_value": "Namespace(&#x27;http://www.w3.org/2006/http#&#x27;)"}, {"fullname": "pyRdfa.options.ProcessorGraph", "modulename": "pyRdfa.options", "qualname": "ProcessorGraph", "kind": "class", "doc": "<p>Wrapper around the 'processor graph', ie, the (RDF) Graph containing the warnings,\nerror messages, and informational messages.</p>\n"}, {"fullname": "pyRdfa.options.ProcessorGraph.graph", "modulename": "pyRdfa.options", "qualname": "ProcessorGraph.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.options.ProcessorGraph.add_triples", "modulename": "pyRdfa.options", "qualname": "ProcessorGraph.add_triples", "kind": "function", "doc": "<p>Add an error structure to the processor graph: a bnode with a number of predicates. The structure\nfollows U{the processor graph vocabulary<a href=\"http://www.w3.org/2010/02/rdfa/wiki/Processor_Graph_Vocabulary\">http://www.w3.org/2010/02/rdfa/wiki/Processor_Graph_Vocabulary</a>} as described\non the RDFa WG Wiki page.</p>\n\n<p>@param msg: the core error message, added as an object to a dc:description\n@param top_class: Error, Warning, or Info; an explicit rdf:type added to the bnode\n@type top_class: URIRef\n@param info_class: An additional error class, added as an rdf:type to the bnode in case it is not None\n@type info_class: URIRef\n@param context: An additional information added, if not None, as an object with rdfa:context as a predicate\n@type context: either an URIRef or a URI String (an URIRef will be created in the second case)\n@param node: The node's element name that contains the error\n@type node: string\n@return: the bnode that serves as a subject for the errors. The caller may add additional information\n@rtype: BNode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">top_class</span>, </span><span class=\"param\"><span class=\"n\">info_class</span>, </span><span class=\"param\"><span class=\"n\">context</span>, </span><span class=\"param\"><span class=\"n\">node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.options.ProcessorGraph.add_http_context", "modulename": "pyRdfa.options", "qualname": "ProcessorGraph.add_http_context", "kind": "function", "doc": "<p>Add an additional HTTP context to a message with subject in C{subj}, using the U{<a href=\"http://www.w3.org/2006/http#\">http://www.w3.org/2006/http#</a>}\nvocabulary. Typically used to extend an error structure, as created by L{add_triples}.</p>\n\n<p>@param subj: an RDFLib resource, typically a blank node\n@param http_code: HTTP status code</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">subj</span>, </span><span class=\"param\"><span class=\"n\">http_code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.options.Options", "modulename": "pyRdfa.options", "qualname": "Options", "kind": "class", "doc": "<p>Settable options. An instance of this class is stored in the <code>ExecutionContext</code> of the parser.</p>\n"}, {"fullname": "pyRdfa.options.Options.__init__", "modulename": "pyRdfa.options", "qualname": "Options.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_default_graph</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">output_processor_graph</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">space_preserve</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">transformers</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">embedded_rdf</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_expansion</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_cache_report</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_vocab_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">add_informational_messages</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_lite</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">experimental_features</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">certifi_verify</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pyRdfa.options.Options.space_preserve", "modulename": "pyRdfa.options", "qualname": "Options.space_preserve", "kind": "variable", "doc": "<p>whether plain literals should preserve spaces at output or not</p>\n"}, {"fullname": "pyRdfa.options.Options.transformers", "modulename": "pyRdfa.options", "qualname": "Options.transformers", "kind": "variable", "doc": "<p>extra transformers</p>\n"}, {"fullname": "pyRdfa.options.Options.processor_graph", "modulename": "pyRdfa.options", "qualname": "Options.processor_graph", "kind": "variable", "doc": "<p>the <code>ProcessorGraph</code></p>\n"}, {"fullname": "pyRdfa.options.Options.output_default_graph", "modulename": "pyRdfa.options", "qualname": "Options.output_default_graph", "kind": "variable", "doc": "<p>whether the 'default' graph should be returned to the user</p>\n"}, {"fullname": "pyRdfa.options.Options.output_processor_graph", "modulename": "pyRdfa.options", "qualname": "Options.output_processor_graph", "kind": "variable", "doc": "<p>whether the 'processor' graph should be returned to the user</p>\n"}, {"fullname": "pyRdfa.options.Options.host_language", "modulename": "pyRdfa.options", "qualname": "Options.host_language", "kind": "variable", "doc": "<p>the host language for the RDFa attributes. Default is HostLanguage.xhtml, but it can be HostLanguage.rdfa_core and HostLanguage.html5, or others...</p>\n"}, {"fullname": "pyRdfa.options.Options.vocab_cache_report", "modulename": "pyRdfa.options", "qualname": "Options.vocab_cache_report", "kind": "variable", "doc": "<p>whether the details of vocabulary file caching process should be reported as information (mainly for debug)</p>\n"}, {"fullname": "pyRdfa.options.Options.refresh_vocab_cache", "modulename": "pyRdfa.options", "qualname": "Options.refresh_vocab_cache", "kind": "variable", "doc": "<p>whether the caching checks of vocabs should be by-passed, ie, if caches should be re-generated regardless of the stored date (important for vocab development)</p>\n"}, {"fullname": "pyRdfa.options.Options.embedded_rdf", "modulename": "pyRdfa.options", "qualname": "Options.embedded_rdf", "kind": "variable", "doc": "<p>whether embedded RDF (ie, turtle in an HTML script element or an RDF/XML content in SVG) should be extracted and added to the final graph. This is a non-standard option...</p>\n"}, {"fullname": "pyRdfa.options.Options.vocab_expansion", "modulename": "pyRdfa.options", "qualname": "Options.vocab_expansion", "kind": "variable", "doc": "<p>whether the @vocab elements should be expanded and a mini-RDFS processing should be done on the merged graph</p>\n"}, {"fullname": "pyRdfa.options.Options.vocab_cache", "modulename": "pyRdfa.options", "qualname": "Options.vocab_cache", "kind": "variable", "doc": "<p>whether the system should use the vocabulary caching mechanism when expanding via the mini-RDFS, or should just fetch the graphs every time</p>\n"}, {"fullname": "pyRdfa.options.Options.add_informational_messages", "modulename": "pyRdfa.options", "qualname": "Options.add_informational_messages", "kind": "variable", "doc": "<p>whether informational messages should also be added to the processor graph, or only errors and warnings</p>\n"}, {"fullname": "pyRdfa.options.Options.check_lite", "modulename": "pyRdfa.options", "qualname": "Options.check_lite", "kind": "variable", "doc": "<p>whether RDFa Lite should be checked, to generate warnings</p>\n"}, {"fullname": "pyRdfa.options.Options.experimental_features", "modulename": "pyRdfa.options", "qualname": "Options.experimental_features", "kind": "variable", "doc": "<p>whether experimental features should be activated; that is a developer's option...</p>\n"}, {"fullname": "pyRdfa.options.Options.certifi_verify", "modulename": "pyRdfa.options", "qualname": "Options.certifi_verify", "kind": "variable", "doc": "<p>whether the SSL certificate should be verified</p>\n"}, {"fullname": "pyRdfa.options.Options.set_host_language", "modulename": "pyRdfa.options", "qualname": "Options.set_host_language", "kind": "function", "doc": "<p>Set the host language for processing, based on the recognized types. If this is not a recognized content type,\nit falls back to RDFa core (i.e., XML)\n@param content_type: content type\n@type content_type: string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.options.Options.reset_processor_graph", "modulename": "pyRdfa.options", "qualname": "Options.reset_processor_graph", "kind": "function", "doc": "<p>Empty the processor graph. This is necessary if the same options is reused\nfor several RDFa sources, and new error messages should be generated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.options.Options.add_warning", "modulename": "pyRdfa.options", "qualname": "Options.add_warning", "kind": "function", "doc": "<p>Add a warning to the processor graph.\n@param txt: the warning text. \n@keyword warning_type: Warning Class\n@type warning_type: URIRef\n@keyword context: possible context to be added to the processor graph\n@type context: URIRef or String\n@keyword buggy_value: a special case when a 'term' is not recognized; no warning is generated for that case if the value is part of the 'usual' XHTML terms, because almost all RDFa file contains some of those and that would pollute the output\n@type buggy_value: String</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">txt</span>,</span><span class=\"param\">\t<span class=\"n\">warning_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">buggy_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.options.Options.add_info", "modulename": "pyRdfa.options", "qualname": "Options.add_info", "kind": "function", "doc": "<p>Add an informational comment to the processor graph.\n@param txt: the information text. \n@keyword info_type: Info Class\n@type info_type: URIRef\n@keyword context: possible context to be added to the processor graph\n@type context: URIRef or String\n@keyword buggy_value: a special case when a 'term' is not recognized; no information is generated for that case if the value is part of the 'usual' XHTML terms, because almost all RDFa file contains some of those and that would pollute the output\n@type buggy_value: String</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">txt</span>, </span><span class=\"param\"><span class=\"n\">info_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buggy_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.options.Options.add_error", "modulename": "pyRdfa.options", "qualname": "Options.add_error", "kind": "function", "doc": "<p>Add an error  to the processor graph.\n@param txt: the information text. \n@keyword err_type: Error Class\n@type err_type: URIRef\n@keyword context: possible context to be added to the processor graph\n@type context: URIRef or String\n@keyword buggy_value: a special case when a 'term' is not recognized; no error is generated for that case if the value is part of the 'usual' XHTML terms, because almost all RDFa file contains some of those and that would pollute the output\n@type buggy_value: String</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">txt</span>, </span><span class=\"param\"><span class=\"n\">err_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buggy_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.parse", "modulename": "pyRdfa.parse", "kind": "module", "doc": "<p>The core parsing function of RDFa. Some details are\nput into other modules to make it clearer to update/modify (e.g., generation of C{@property} values, or managing the current state).</p>\n\n<p>Note that the entry point (L{parse_one_node}) bifurcates into an RDFa 1.0 and RDFa 1.1 version, ie,\nto L{_parse_1_0} and L{_parse_1_1}. Some of the parsing details (management of C{@property}, list facilities, changed behavior on C{@typeof})) have changed\nbetween versions and forcing the two into one function would be counter productive.</p>\n\n<p>@summary: RDFa core parser processing step\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.parse.parse_one_node", "modulename": "pyRdfa.parse", "qualname": "parse_one_node", "kind": "function", "doc": "<p>The (recursive) step of handling a single node. </p>\n\n<p>This entry just switches between the RDFa 1.0 and RDFa 1.1 versions for parsing. This method is only invoked once,\nactually, from the top level; the recursion then happens in the L{_parse_1_0} and L{_parse_1_1} methods for\nRDFa 1.0 and RDFa 1.1, respectively.</p>\n\n<p>@param node: the DOM node to handle\n@param graph: the RDF graph\n@type graph: RDFLib's Graph object instance\n@param parent_object: the parent's object, as an RDFLib URIRef\n@param incoming_state: the inherited state (namespaces, lang, etc.)\n@type incoming_state: L{state.ExecutionContext}\n@param parent_incomplete_triples: list of hanging triples (the missing resource set to None) to be handled (or not)\nby the current node.\n@return: whether the caller has to complete it's parent's incomplete triples\n@rtype: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node</span>,</span><span class=\"param\">\t<span class=\"n\">graph</span>,</span><span class=\"param\">\t<span class=\"n\">parent_object</span>,</span><span class=\"param\">\t<span class=\"n\">incoming_state</span>,</span><span class=\"param\">\t<span class=\"n\">parent_incomplete_triples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.parse.handle_role_attribute", "modulename": "pyRdfa.parse", "qualname": "handle_role_attribute", "kind": "function", "doc": "<p>Handling the role attribute, according to <a href=\"http://www.w3.org/TR/role-attribute/#using-role-in-conjunction-with-rdfa\">http://www.w3.org/TR/role-attribute/#using-role-in-conjunction-with-rdfa</a>\n@param node: the DOM node to handle\n@param graph: the RDF graph\n@type graph: RDFLib's Graph object instance\n@param state: the inherited state (namespaces, lang, etc.)\n@type state: L{state.ExecutionContext}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.property", "modulename": "pyRdfa.property", "kind": "module", "doc": "<p>Implementation of the C{@property} value handling.</p>\n\n<p>RDFa 1.0 and RDFa 1.1 are fairly different. RDFa 1.0 generates only literals, see\nU{RDFa Task Force's wiki page<a href=\"http://www.w3.org/2006/07/SWD/wiki/RDFa/LiteralObject\">http://www.w3.org/2006/07/SWD/wiki/RDFa/LiteralObject</a>} for the details.\nOn the other hand, RDFa 1.1, beyond literals, can also generate URI references. Hence the duplicate method in the L{ProcessProperty} class, one for RDFa 1.0 and the other for RDFa 1.1.</p>\n\n<p>@summary: RDFa Literal generation\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.property.XMLLiteral", "modulename": "pyRdfa.property", "qualname": "XMLLiteral", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral&#x27;)"}, {"fullname": "pyRdfa.property.HTMLLiteral", "modulename": "pyRdfa.property", "qualname": "HTMLLiteral", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML&#x27;)"}, {"fullname": "pyRdfa.property.ProcessProperty", "modulename": "pyRdfa.property", "qualname": "ProcessProperty", "kind": "class", "doc": "<p>Generate the value for C{@property} taking into account datatype, etc.\nNote: this class is created only if the C{@property} is indeed present, no need to check.</p>\n\n<p>@ivar node: DOM element node\n@ivar graph: the (RDF) graph to add the properies to\n@ivar subject: the RDFLib URIRef serving as a subject for the generated triples\n@ivar state: the current state to be used for the CURIE-s\n@type state: L{state.ExecutionContext}\n@ivar typed_resource: Typically the bnode generated by a @typeof</p>\n"}, {"fullname": "pyRdfa.property.ProcessProperty.__init__", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.__init__", "kind": "function", "doc": "<p>@param node: DOM element node\n@param graph: the (RDF) graph to add the properies to\n@param subject: the RDFLib URIRef serving as a subject for the generated triples\n@param state: the current state to be used for the CURIE-s\n@param state: L{state.ExecutionContext}\n@param typed_resource: Typically the bnode generated by a @typeof; in RDFa 1.1, that becomes the object for C{@property}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">subject</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">typed_resource</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.property.ProcessProperty.node", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.node", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.property.ProcessProperty.graph", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.property.ProcessProperty.subject", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.subject", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.property.ProcessProperty.state", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.property.ProcessProperty.typed_resource", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.typed_resource", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.property.ProcessProperty.generate", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.generate", "kind": "function", "doc": "<p>Common entry point for the RDFa 1.0 and RDFa 1.1 versions; bifurcates based on the RDFa version, as retrieved from the state object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.property.ProcessProperty.generate_1_1", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.generate_1_1", "kind": "function", "doc": "<p>Generate the property object, 1.1 version</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.property.ProcessProperty.generate_1_0", "modulename": "pyRdfa.property", "qualname": "ProcessProperty.generate_1_0", "kind": "function", "doc": "<p>Generate the property object, 1.0 version</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdflibparsers", "modulename": "pyRdfa.rdflibparsers", "kind": "module", "doc": "<p>Extraction parsers for structured data embedded into HTML or XML files.\nThe former may include RDFa or microdata. The syntax and the extraction\nprocedures are based on:</p>\n\n<ul>\n<li>The RDFa specifications: <a href=\"http://www.w3.org/TR/#tr_RDFa\">http://www.w3.org/TR/#tr_RDFa</a></li>\n<li>The microdata specification: <a href=\"http://www.w3.org/TR/microdata/\">http://www.w3.org/TR/microdata/</a></li>\n<li>The specification of the microdata to RDF conversion:\n<a href=\"http://www.w3.org/TR/microdata-rdf/\">http://www.w3.org/TR/microdata-rdf/</a></li>\n</ul>\n\n<p>License: W3C Software License,\n<a href=\"http://www.w3.org/Consortium/Legal/copyright-software\">http://www.w3.org/Consortium/Legal/copyright-software</a>\nAuthor: Ivan Herman\nCopyright: W3C</p>\n"}, {"fullname": "pyRdfa.rdflibparsers.RDFaParser", "modulename": "pyRdfa.rdflibparsers", "qualname": "RDFaParser", "kind": "class", "doc": "<p>Wrapper around the RDFa 1.1 parser. For further details on the RDFa 1.1\nprocessing, see the relevant W3C documents at\n<a href=\"http://www.w3.org/TR/#tr_RDFa\">http://www.w3.org/TR/#tr_RDFa</a>. RDFa 1.1 is defined for XHTML, HTML5, SVG\nand, in general, for any XML language.</p>\n\n<p>Note that the parser can also handle RDFa 1.0 if the extra parameter is\nused and/or the input source uses RDFa 1.0 specific @version or DTD-s.</p>\n", "bases": "rdflib.parser.Parser"}, {"fullname": "pyRdfa.rdflibparsers.RDFaParser.parse", "modulename": "pyRdfa.rdflibparsers", "qualname": "RDFaParser.parse", "kind": "function", "doc": "<p>@param source: one of the input sources that the RDFLib package defined\n@type source: InputSource class instance\n@param graph: target graph for the triples; output graph, in RDFa spec.\nparlance\n@type graph: RDFLib Graph\n@keyword pgraph: target for error and warning triples; processor graph,\nin RDFa spec. parlance. If set to None, these triples are ignored\n@type pgraph: RDFLib Graph\n@keyword media_type: explicit setting of the preferred media type\n(a.k.a. content type) of the the RDFa source. None means the content\ntype of the HTTP result is used, or a guess is made based on the\nsuffix of a file\n@type media_type: string\n@keyword rdfa_version: 1.0 or 1.1. If the value is \"\", then, by\ndefault, 1.1 is used unless the source has explicit signals to use\n1.0 (e.g., using a @version attribute, using a DTD set up for 1.0, etc)\n@type rdfa_version: string\n@keyword embedded_rdf: some formats allow embedding RDF in other\nformats: (X)HTML can contain turtle in a special <script> element,\nSVG can have RDF/XML embedded in a <metadata> element. This flag\ncontrols whether those triples should be interpreted and added to\nthe output graph. Some languages (e.g., SVG) require this, and the\nflag is ignored.\n@type embedded_rdf: Boolean\n@keyword space_preserve: by default, space in the HTML source must be preserved in the generated literal;\nthis behavior can be switched off\n@type space_preserve: Boolean\n@keyword vocab_expansion: whether the RDFa @vocab attribute should\nalso mean vocabulary expansion (see the RDFa 1.1 spec for further\ndetails)\n@type vocab_expansion: Boolean\n@keyword vocab_cache: in case vocab expansion is used, whether the\nexpansion data (i.e., vocabulary) should be cached locally. This\nrequires the ability for the local application to write on the\nlocal file system\n@type vocab_chache: Boolean\n@keyword vocab_cache_report: whether the details of vocabulary file caching process should be reported\nin the processor graph as information (mainly useful for debug)\n@type vocab_cache_report: Boolean\n@keyword refresh_vocab_cache: whether the caching checks of vocabs should be by-passed, ie, if caches should be re-generated regardless of the stored date (important for vocab development)\n@type refresh_vocab_cache: Boolean\n@keyword check_lite: generate extra warnings in case the input source is not RDFa 1.1 check_lite\n@type check_lite: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span>,</span><span class=\"param\">\t<span class=\"n\">graph</span>,</span><span class=\"param\">\t<span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">rdfa_version</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">embedded_rdf</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">space_preserve</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_expansion</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_vocab_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_cache_report</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_lite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdflibparsers.RDFa10Parser", "modulename": "pyRdfa.rdflibparsers", "qualname": "RDFa10Parser", "kind": "class", "doc": "<p>This is just a convenience class to wrap around the RDFa 1.0 parser.</p>\n", "bases": "rdflib.parser.Parser"}, {"fullname": "pyRdfa.rdflibparsers.RDFa10Parser.parse", "modulename": "pyRdfa.rdflibparsers", "qualname": "RDFa10Parser.parse", "kind": "function", "doc": "<p>@param source: one of the input sources that the RDFLib package defined\n@type source: InputSource class instance\n@param graph: target graph for the triples; output graph, in RDFa\nspec. parlance\n@type graph: RDFLib Graph\n@keyword pgraph: target for error and warning triples; processor\ngraph, in RDFa spec. parlance. If set to None, these triples are\nignored\n@type pgraph: RDFLib Graph\n@keyword media_type: explicit setting of the preferred media type\n(a.k.a. content type) of the the RDFa source. None means the content\ntype of the HTTP result is used, or a guess is made based on the\nsuffix of a file\n@type media_type: string\n@keyword rdfOutput: whether Exceptions should be catched and added,\nas triples, to the processor graph, or whether they should be raised.\n@type rdfOutput: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdflibparsers.StructuredDataParser", "modulename": "pyRdfa.rdflibparsers", "qualname": "StructuredDataParser", "kind": "class", "doc": "<p>Convenience parser to extract both RDFa (including embedded Turtle)\nand microdata from an HTML file.\nIt is simply a wrapper around the specific parsers.</p>\n", "bases": "rdflib.parser.Parser"}, {"fullname": "pyRdfa.rdflibparsers.StructuredDataParser.parse", "modulename": "pyRdfa.rdflibparsers", "qualname": "StructuredDataParser.parse", "kind": "function", "doc": "<p>@param source: one of the input sources that the RDFLib package defined\n@type source: InputSource class instance\n@param graph: target graph for the triples; output graph, in RDFa\nspec. parlance\n@keyword rdfa_version: 1.0 or 1.1. If the value is \"\", then, by\ndefault, 1.1 is used unless the source has explicit signals to use 1.0\n(e.g., using a @version attribute, using a DTD set up for 1.0, etc)\n@type rdfa_version: string\n@type graph: RDFLib Graph\n@keyword pgraph: target for error and warning triples; processor\ngraph, in RDFa spec. parlance. If set to None, these triples are\nignored\n@type pgraph: RDFLib Graph\n@keyword vocab_expansion: whether the RDFa @vocab attribute should\nalso mean vocabulary expansion (see the RDFa 1.1 spec for further\n    details)\n@type vocab_expansion: Boolean\n@keyword vocab_cache: in case vocab expansion is used, whether the\nexpansion data (i.e., vocabulary) should be cached locally. This\nrequires the ability for the local application to write on the\nlocal file system\n@type vocab_chache: Boolean\n@keyword rdfOutput: whether Exceptions should be catched and added,\nas triples, to the processor graph, or whether they should be raised.\n@type rdfOutput: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span>,</span><span class=\"param\">\t<span class=\"n\">graph</span>,</span><span class=\"param\">\t<span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rdfa_version</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_expansion</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vocab_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;text/html&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdflibparsers.HTurtle", "modulename": "pyRdfa.rdflibparsers", "qualname": "HTurtle", "kind": "class", "doc": "<p>Bastardizing the RDFa 1.1 parser to do a hturtle extractions</p>\n", "bases": "pyRdfa.pyRdfa"}, {"fullname": "pyRdfa.rdflibparsers.HTurtle.__init__", "modulename": "pyRdfa.rdflibparsers", "qualname": "HTurtle.__init__", "kind": "function", "doc": "<p>@keyword options: Options for the distiller\n@type options: L{Options}\n@keyword base: URI for the default \"base\" value (usually the URI of the file to be processed)\n@keyword media_type: explicit setting of the preferred media type (a.k.a. content type) of the the RDFa source\n@keyword rdfa_version: the RDFa version that should be used. If not set, the value of the global L{rdfa_current_version} variable is used</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">base</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "pyRdfa.rdflibparsers.HTurtle.graph_from_DOM", "modulename": "pyRdfa.rdflibparsers", "qualname": "HTurtle.graph_from_DOM", "kind": "function", "doc": "<p>Stealing the parsing function from the original class, to do\nturtle extraction only</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdflibparsers.HTurtleParser", "modulename": "pyRdfa.rdflibparsers", "qualname": "HTurtleParser", "kind": "class", "doc": "<p></p>\n", "bases": "rdflib.parser.Parser"}, {"fullname": "pyRdfa.rdflibparsers.HTurtleParser.parse", "modulename": "pyRdfa.rdflibparsers", "qualname": "HTurtleParser.parse", "kind": "function", "doc": "<p>@param source: one of the input sources that the RDFLib package defined\n@type source: InputSource class instance\n@param graph: target graph for the triples; output graph, in RDFa spec.\nparlance\n@type graph: RDFLib Graph\n@keyword media_type: explicit setting of the preferred media type\n(a.k.a. content type) of the the RDFa source. None means the content\ntype of the HTTP result is used, or a guess is made based on the\nsuffix of a file\n@type media_type: string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">pgraph</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs", "modulename": "pyRdfa.rdfs", "kind": "module", "doc": "<p>Separate module to handle vocabulary expansions. The L{cache} module takes care of caching vocabulary graphs; the L{process}\nmodule takes care of the expansion itself.</p>\n\n<p>@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.rdfs.VocabCachingInfo", "modulename": "pyRdfa.rdfs", "qualname": "VocabCachingInfo", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2007/08/pyRdfa/vocab#VocabCachingInfo&#x27;)"}, {"fullname": "pyRdfa.rdfs.err_outdated_cache", "modulename": "pyRdfa.rdfs", "qualname": "err_outdated_cache", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Vocab document &lt;%s&gt; could not be dereferenced; using possibly outdated cache&#x27;"}, {"fullname": "pyRdfa.rdfs.err_unreachable_vocab", "modulename": "pyRdfa.rdfs", "qualname": "err_unreachable_vocab", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Vocab document &lt;%s&gt; could not be dereferenced&#x27;"}, {"fullname": "pyRdfa.rdfs.err_unparsable_Turtle_vocab", "modulename": "pyRdfa.rdfs", "qualname": "err_unparsable_Turtle_vocab", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Could not parse vocab in Turtle at &lt;%s&gt; (%s)&#x27;"}, {"fullname": "pyRdfa.rdfs.err_unparsable_xml_vocab", "modulename": "pyRdfa.rdfs", "qualname": "err_unparsable_xml_vocab", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Could not parse vocab in RDF/XML at &lt;%s&gt; (%s)&#x27;"}, {"fullname": "pyRdfa.rdfs.err_unparsable_ntriples_vocab", "modulename": "pyRdfa.rdfs", "qualname": "err_unparsable_ntriples_vocab", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Could not parse vocab in N-Triple at &lt;%s&gt; (%s)&#x27;"}, {"fullname": "pyRdfa.rdfs.err_unparsable_rdfa_vocab", "modulename": "pyRdfa.rdfs", "qualname": "err_unparsable_rdfa_vocab", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Could not parse vocab in RDFa at &lt;%s&gt; (%s)&#x27;"}, {"fullname": "pyRdfa.rdfs.err_unrecognised_vocab_type", "modulename": "pyRdfa.rdfs", "qualname": "err_unrecognised_vocab_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Unrecognized media type for the vocab file &lt;%s&gt;: &#x27;%s&#x27;&quot;"}, {"fullname": "pyRdfa.rdfs.cache", "modulename": "pyRdfa.rdfs.cache", "kind": "module", "doc": "<p>Managing Vocab Caching.</p>\n\n<p>@summary: RDFa parser (distiller)\n@requires: U{RDFLib<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.rdfs.cache.xml_application_media_type", "modulename": "pyRdfa.rdfs.cache", "qualname": "xml_application_media_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;application/[a-zA-Z0-9]+\\\\+xml&#x27;)"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex", "kind": "class", "doc": "<p>Class to manage the cache index. Takes care of finding the vocab directory, and manages the index\nto the individual vocab data.</p>\n\n<p>The vocab directory is set to a platform specific area, unless an environment variable\nsets it explicitly. The environment variable is \"PyRdfaCacheDir\"</p>\n\n<p>Every time the index is changed, the index is put back (via pickle) to the directory.</p>\n\n<p>@ivar app_data_dir: directory for the vocabulary cache directory\n@ivar index_fname: the full path of the index file on the disc\n@ivar indeces: the in-memory version of the index (a directory mapping URI-s to tuples)\n@ivar options: the error handler (option) object to send warnings to\n@type options: L{options.Options}\n@ivar report: whether details on the caching should be reported\n@type report: Boolean\n@cvar vocabs: File name used for the index in the cache directory\n@cvar preference_path: Cache directories for the three major platforms (ie, mac, windows, unix)\n@type preference_path: directory, keyed by \"mac\", \"win\", and \"unix\"\n@cvar architectures: Various 'architectures' as returned by the python call, and their mapping on one of the major platforms. If an architecture is missing, it is considered to be \"unix\"\n@type architectures: directory, mapping architectures to \"mac\", \"win\", or \"unix\"</p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.__init__", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.__init__", "kind": "function", "doc": "<p>@param options: the error handler (option) object to send warnings to\n@type options: L{options.Options}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.vocabs", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.vocabs", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;cache_index&#x27;"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.preference_path", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.preference_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;mac&#x27;: &#x27;Library/Application Support/pyRdfa-cache&#x27;, &#x27;win&#x27;: &#x27;pyRdfa-cache&#x27;, &#x27;unix&#x27;: &#x27;.pyRdfa-cache&#x27;}"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.architectures", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.architectures", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;darwin&#x27;: &#x27;mac&#x27;, &#x27;nt&#x27;: &#x27;win&#x27;, &#x27;win32&#x27;: &#x27;win&#x27;, &#x27;cygwin&#x27;: &#x27;win&#x27;}"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.options", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.report", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.report", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.app_data_dir", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.app_data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.index_fname", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.index_fname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.indeces", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.indeces", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.add_ref", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.add_ref", "kind": "function", "doc": "<p>Add a new entry to the index, possibly removing the previous one.</p>\n\n<p>@param uri: the URI that serves as a key in the index directory\n@param vocab_reference: tuple consisting of file name, modification date, and expiration date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uri</span>, </span><span class=\"param\"><span class=\"n\">vocab_reference</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocabIndex.get_ref", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocabIndex.get_ref", "kind": "function", "doc": "<p>Get an index entry, if available, None otherwise.\nThe return value is a tuple: file name, modification date, and expiration date</p>\n\n<p>@param uri: the URI that serves as a key in the index directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uri</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocab", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocab", "kind": "class", "doc": "<p>Cache for a specific vocab. The content of the cache is the graph. These are also the data that are stored\non the disc (in pickled form)</p>\n\n<p>@ivar graph: the RDF graph\n@ivar URI: vocabulary URI\n@ivar filename: file name (not the complete path) of the cached version\n@ivar creation_date: creation date of the cache\n@type creation_date: datetime\n@ivar expiration_date: expiration date of the cache\n@type expiration_date: datetime\n@cvar runtime_cache : a run time cache for already 'seen' vocabulary files. Apart from (marginally) speeding up processing, this also prevents recursion\n@type runtime_cache : dictionary</p>\n", "bases": "CachedVocabIndex"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocab.__init__", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocab.__init__", "kind": "function", "doc": "<p>@param URI: real URI for the vocabulary file\n@param options: the error handler (option) object to send warnings to\n@type options: L{options.Options}\n@param verify: whether the SSL certificate needs to be verified.\n@type verify: bool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">URI</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocab.uri", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocab.uri", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.CachedVocab.graph", "modulename": "pyRdfa.rdfs.cache", "qualname": "CachedVocab.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.cache.offline_cache_generation", "modulename": "pyRdfa.rdfs.cache", "qualname": "offline_cache_generation", "kind": "function", "doc": "<p>Generate a cache for the vocabulary in args.</p>\n\n<p>@param args:   array of vocabulary URIs.\n@param verify: whether the SSL certificate needs to be verified.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.process", "modulename": "pyRdfa.rdfs.process", "kind": "module", "doc": "<p>@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.rdfs.process.ns_owl", "modulename": "pyRdfa.rdfs.process", "qualname": "ns_owl", "kind": "variable", "doc": "<p></p>\n", "default_value": "Namespace(&#x27;http://www.w3.org/2002/07/owl#&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.return_graph", "modulename": "pyRdfa.rdfs.process", "qualname": "return_graph", "kind": "function", "doc": "<p>Parse a file, and return an RDFLib Graph. The URI's content type is checked and either one of\nRDFLib's parsers is invoked (for the Turtle, RDF/XML, and N Triple cases) or a separate RDFa processing is invoked\non the RDFa content.</p>\n\n<p>The Accept header of the HTTP request gives a preference to Turtle, followed by RDF/XML and then HTML (RDFa), in case content negotiation is used.</p>\n\n<p>This function is used to retreive the vocabulary file and turn it into an RDFLib graph.</p>\n\n<p>@param uri: URI for the graph\n@param options: used as a place where warnings can be sent\n@param newCache: in case this is used with caching, whether a new cache is generated; that modifies the warning text\n@param verify: whether the SSL certificate should be verified\n@return: A tuple consisting of an RDFLib Graph instance and an expiration date); None if the dereferencing or the parsing was unsuccessful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uri</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">newCache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.process.rdftype", "modulename": "pyRdfa.rdfs.process", "qualname": "rdftype", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.Property", "modulename": "pyRdfa.rdfs.process", "qualname": "Property", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/1999/02/22-rdf-syntax-ns#Property&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.Class", "modulename": "pyRdfa.rdfs.process", "qualname": "Class", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2000/01/rdf-schema#Class&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.subClassOf", "modulename": "pyRdfa.rdfs.process", "qualname": "subClassOf", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2000/01/rdf-schema#subClassOf&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.subPropertyOf", "modulename": "pyRdfa.rdfs.process", "qualname": "subPropertyOf", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.equivalentProperty", "modulename": "pyRdfa.rdfs.process", "qualname": "equivalentProperty", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2002/07/owl#equivalentProperty&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.equivalentClass", "modulename": "pyRdfa.rdfs.process", "qualname": "equivalentClass", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/2002/07/owl#equivalentClass&#x27;)"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL", "kind": "class", "doc": "<p>Class implementing the simple OWL RL Reasoning required by RDFa in managing vocabulary files. This is done via\na forward chaining process (in the L{closure} method) using a few simple rules as defined by the RDF and the OWL Semantics\nspecifications.</p>\n\n<p>@ivar graph: the graph that has to be expanded\n@ivar added_triples: each cycle collects the triples that are to be added to the graph eventually.\n@type added_triples: a set, to ensure the unicity of triples being added</p>\n"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.__init__", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">schema_semantics</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.graph", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.added_triples", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.added_triples", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.schema_semantics", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.schema_semantics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.closure", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.closure", "kind": "function", "doc": "<p>Generate the closure the graph. This is the real 'core'.</p>\n\n<p>The processing rules store new triples via the L{separate method<store_triple>} which stores\nthem in the L{added_triples<added_triples>} array. If that array is emtpy at the end of a cycle,\nit means that the whole process can be stopped.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.store_triple", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.store_triple", "kind": "function", "doc": "<p>In contrast to its name, this does not yet add anything to the graph itself, it just stores the tuple in an\nL{internal set<added_triples>}. (It is important for this to be a set: some of the rules in the various closures may\ngenerate the same tuples several times.) Before adding the tuple to the set, the method checks whether\nthe tuple is in the final graph already (if yes, it is not added to the set).</p>\n\n<p>The set itself is emptied at the start of every processing cycle; the triples are then effectively added to the\ngraph at the end of such a cycle. If the set is\nactually empty at that point, this means that the cycle has not added any new triple, and the full processing can stop.</p>\n\n<p>@param t: the triple to be added to the graph, unless it is already there\n@type t: a 3-element tuple of (s,p,o)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.process.MiniOWL.rules", "modulename": "pyRdfa.rdfs.process", "qualname": "MiniOWL.rules", "kind": "function", "doc": "<p>Go through the OWL-RL entailement rules prp-spo1, prp-eqp1, prp-eqp2, cax-sco, cax-eqc1, and cax-eqc2 by extending the graph.\n@param t: a triple (in the form of a tuple)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.rdfs.process.process_rdfa_sem", "modulename": "pyRdfa.rdfs.process", "qualname": "process_rdfa_sem", "kind": "function", "doc": "<p>Expand the graph through the minimal RDFS and OWL rules defined for RDFa.</p>\n\n<p>The expansion is done in several steps:</p>\n\n<ol>\n<li>the vocabularies are retrieved from the incoming graph (there are RDFa triples generated for that)</li>\n<li>all vocabularies are merged into a separate vocabulary graph</li>\n<li>the RDFS/OWL expansion is done on the vocabulary graph, to take care of all the subproperty, subclass, etc, chains</li>\n<li>the (expanded) vocabulary graph content is added to the incoming graph</li>\n<li>the incoming graph is expanded</li>\n<li>the triples appearing in the vocabulary graph are removed from the incoming graph, to avoid unnecessary extra triples from the data</li>\n</ol>\n\n<p>@param graph: an RDFLib Graph instance, to be expanded\n@param options: options as defined for the RDFa run; used to generate warnings\n@type options: L{pyRdfa.Options}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state", "modulename": "pyRdfa.state", "kind": "module", "doc": "<p>Parser's execution context (a.k.a. state) object and handling. The state includes:</p>\n\n<ul>\n<li>language, retrieved from C{@xml:lang} or C{@lang}</li>\n<li>URI base, determined by C{<base>} or set explicitly. This is a little bit superfluous, because the current RDFa syntax does not make use of C{@xml:base}; i.e., this could be a global value.  But the structure is prepared to add C{@xml:base} easily, if needed.</li>\n<li>options, in the form of an L{options<pyRdfa.options>} instance</li>\n<li>a separate vocabulary/CURIE handling resource, in the form of an L{termorcurie<pyRdfa.TermOrCurie>} instance</li>\n</ul>\n\n<p>The execution context object is also used to handle URI-s, CURIE-s, terms, etc.</p>\n\n<p>@summary: RDFa parser execution context\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.state.ListStructure", "modulename": "pyRdfa.state", "qualname": "ListStructure", "kind": "class", "doc": "<p>Special class to handle the C{@inlist} type structures in RDFa 1.1; stores the \"origin\", i.e,\nwhere the list will be attached to, and the mappings as defined in the spec.</p>\n"}, {"fullname": "pyRdfa.state.ListStructure.mapping", "modulename": "pyRdfa.state", "qualname": "ListStructure.mapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.state.ListStructure.origin", "modulename": "pyRdfa.state", "qualname": "ListStructure.origin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.state.ExecutionContext", "modulename": "pyRdfa.state", "qualname": "ExecutionContext", "kind": "class", "doc": "<p>State at a specific node, including the current set of namespaces in the RDFLib sense, current language,\nthe base, vocabularies, etc. The class is also used to interpret URI-s and CURIE-s to produce\nURI references for RDFLib.</p>\n\n<p>@ivar options: reference to the overall options\n@type options: L{Options}\n@ivar base: the 'base' URI\n@ivar parsedBase: the parsed version of base, as produced by urlparse.urlsplit\n@ivar defaultNS: default namespace (if defined via @xmlns) to be used for XML Literals\n@ivar lang: language tag (possibly None)\n@ivar term_or_curie: vocabulary management class instance\n@type term_or_curie: L{termorcurie.TermOrCurie}\n@ivar list_mapping: dictionary of arrays, containing a list of URIs key-ed via properties for lists\n@ivar node: the node to which this state belongs\n@type node: DOM node instance\n@ivar rdfa_version: RDFa version of the content\n@type rdfa_version: String\n@ivar supress_lang: in some cases, the effect of the lang attribute should be supressed for the given node, although it should be inherited down below (example: @value attribute of the data element in HTML5)\n@type supress_lang: Boolean\n@cvar _list: list of attributes that allow for lists of values and should be treated as such\n@cvar _resource_type: dictionary; mapping table from attribute name to the exact method to retrieve the URI(s). Is initialized at first instantiation.</p>\n"}, {"fullname": "pyRdfa.state.ExecutionContext.__init__", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.__init__", "kind": "function", "doc": "<p>@param node: the current DOM Node\n@param graph: the RDFLib Graph\n@keyword inherited_state: the state as inherited\nfrom upper layers. This inherited_state is mixed with the state information\nretrieved from the current node.\n@type inherited_state: L{state.ExecutionContext}\n@keyword base: string denoting the base URI for the specific node. This overrides the possible\nbase inherited from the upper layers. The \ncurrent XHTML+RDFa syntax does not allow the usage of C{@xml:base}, but SVG1.2 does, so this is\nnecessary for SVG (and other possible XML dialects that accept C{@xml:base})\n@keyword options: invocation options, and references to warning graphs\n@type options: L{Options<pyRdfa.options>}</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node</span>,</span><span class=\"param\">\t<span class=\"n\">graph</span>,</span><span class=\"param\">\t<span class=\"n\">inherited_state</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">base</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rdfa_version</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyRdfa.state.ExecutionContext.node", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.node", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.state.ExecutionContext.parsedBase", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.parsedBase", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.state.ExecutionContext.term_or_curie", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.term_or_curie", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.state.ExecutionContext.supress_lang", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.supress_lang", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.state.ExecutionContext.getURI", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.getURI", "kind": "function", "doc": "<p>Get the URI(s) for the attribute. The name of the attribute determines whether the value should be\na pure URI, a CURIE, etc, and whether the return is a single element of a list of those. This is done\nusing the L{ExecutionContext._resource_type} table.\n@param attr: attribute name\n@type attr: string\n@return: an RDFLib URIRef instance (or None) or a list of those</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.getResource", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.getResource", "kind": "function", "doc": "<p>Get single resources from several different attributes. The first one that returns a valid URI wins.\n@param args: variable list of attribute names, or a single attribute being a list itself.\n@return: an RDFLib URIRef instance (or None):</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.reset_list_mapping", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.reset_list_mapping", "kind": "function", "doc": "<p>Reset, ie, create a new empty dictionary for the list mapping.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.list_empty", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.list_empty", "kind": "function", "doc": "<p>Checks whether the list is empty.\n@return: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.get_list_props", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.get_list_props", "kind": "function", "doc": "<p>Return the list of property values in the list structure\n@return: list of URIRef</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.get_list_value", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.get_list_value", "kind": "function", "doc": "<p>Return the list of values in the list structure for a specific property\n@return: list of RDF nodes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prop</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.set_list_origin", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.set_list_origin", "kind": "function", "doc": "<p>Set the origin of the list, ie, the subject to attach the final list(s) to\n@param origin: URIRef</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.get_list_origin", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.get_list_origin", "kind": "function", "doc": "<p>Return the origin of the list, ie, the subject to attach the final list(s) to\n@return: URIRef</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.state.ExecutionContext.add_to_list_mapping", "modulename": "pyRdfa.state", "qualname": "ExecutionContext.add_to_list_mapping", "kind": "function", "doc": "<p>Add a new property-resource on the list mapping structure. The latter is a dictionary of arrays;\nif the array does not exist yet, it will be created on the fly.</p>\n\n<p>@param prop: the property URI, used as a key in the dictionary\n@param resource: the resource to be added to the relevant array in the dictionary. Can be None; this is a dummy\nplaceholder for C{<span rel=\"property\" inlist>...</span>} constructions that may be filled in by children or siblings; if not\nan empty list has to be generated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prop</span>, </span><span class=\"param\"><span class=\"n\">resource</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.termorcurie", "modulename": "pyRdfa.termorcurie", "kind": "module", "doc": "<p>Management of vocabularies, terms, and their mapping to URI-s. The main class of this module (L{TermOrCurie}) is,\nconceptually, part of the overall state of processing at a node (L{state.ExecutionContext}) but putting it into a separate\nmodule makes it easider to maintain.</p>\n\n<p>@summary: Management of vocabularies, terms, and their mapping to URI-s.\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n\n<p>@var XHTML_PREFIX: prefix for the XHTML vocabulary URI (set to 'xhv')\n@var XHTML_URI: URI prefix of the XHTML vocabulary\n@var ncname: Regular expression object for NCNAME\n@var termname: Regular expression object for a term\n@var xml_application_media_type: Regular expression object for a general XML application media type</p>\n"}, {"fullname": "pyRdfa.termorcurie.ncname", "modulename": "pyRdfa.termorcurie", "qualname": "ncname", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^[A-Za-z][A-Za-z0-9._-]*$&#x27;)"}, {"fullname": "pyRdfa.termorcurie.termname", "modulename": "pyRdfa.termorcurie", "qualname": "termname", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^[A-Za-z]([A-Za-z0-9._-]|/)*$&#x27;)"}, {"fullname": "pyRdfa.termorcurie.xml_application_media_type", "modulename": "pyRdfa.termorcurie", "qualname": "xml_application_media_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;application/[a-zA-Z0-9]+\\\\+xml&#x27;)"}, {"fullname": "pyRdfa.termorcurie.XHTML_PREFIX", "modulename": "pyRdfa.termorcurie", "qualname": "XHTML_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;xhv&#x27;"}, {"fullname": "pyRdfa.termorcurie.XHTML_URI", "modulename": "pyRdfa.termorcurie", "qualname": "XHTML_URI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.w3.org/1999/xhtml/vocab#&#x27;"}, {"fullname": "pyRdfa.termorcurie.InitialContext", "modulename": "pyRdfa.termorcurie", "qualname": "InitialContext", "kind": "class", "doc": "<p>Get the initial context values. In most cases this class has an empty content, except for the\ntop level (in case of RDFa 1.1). Each L{TermOrCurie} class has one instance of this class. It provides initial\nmappings for terms, namespace prefixes, etc, that the top level L{TermOrCurie} instance uses for its own initialization.</p>\n\n<p>@ivar terms: collection of all term mappings\n@type terms: dictionary\n@ivar ns: namespace mapping\n@type ns: dictionary\n@ivar vocabulary: default vocabulary\n@type vocabulary: string</p>\n"}, {"fullname": "pyRdfa.termorcurie.InitialContext.__init__", "modulename": "pyRdfa.termorcurie", "qualname": "InitialContext.__init__", "kind": "function", "doc": "<p>@param state: the state behind this term mapping\n@type state: L{state.ExecutionContext}\n@param top_level : whether this is the top node of the DOM tree (the only place where initial contexts are handled)\n@type top_level : boolean</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">top_level</span></span>)</span>"}, {"fullname": "pyRdfa.termorcurie.InitialContext.state", "modulename": "pyRdfa.termorcurie", "qualname": "InitialContext.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.InitialContext.terms", "modulename": "pyRdfa.termorcurie", "qualname": "InitialContext.terms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.InitialContext.ns", "modulename": "pyRdfa.termorcurie", "qualname": "InitialContext.ns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.InitialContext.vocabulary", "modulename": "pyRdfa.termorcurie", "qualname": "InitialContext.vocabulary", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie", "kind": "class", "doc": "<p>Wrapper around vocabulary management, ie, mapping a term to a URI, as well as a CURIE to a URI. Each instance of this class belongs to a\n\"state\", instance of L{state.ExecutionContext}. Context definitions are managed at initialization time.</p>\n\n<p>(In fact, this class is, conceptually, part of the overall state at a node, and has been separated here for an\neasier maintenance.)</p>\n\n<p>The class takes care of the stack-like behavior of vocabulary items, ie, inheriting everything that is possible\nfrom the \"parent\". At initialization time, this works through the prefix definitions (i.e., C{@prefix} or C{@xmln:} attributes)\nand/or C{@vocab} attributes.</p>\n\n<p>@ivar state: State to which this instance belongs\n@type state: L{state.ExecutionContext}\n@ivar graph: The RDF Graph under generation\n@type graph: rdflib.Graph\n@ivar terms: mapping from terms to URI-s\n@type terms: dictionary\n@ivar ns: namespace declarations, ie, mapping from prefixes to URIs\n@type ns: dictionary\n@ivar default_curie_uri: URI for a default CURIE</p>\n"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie.__init__", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie.__init__", "kind": "function", "doc": "<p>Initialize the vocab bound to a specific state. \n@param state: the state to which this vocab instance belongs to\n@type state: L{state.ExecutionContext}\n@param graph: the RDF graph being worked on\n@type graph: rdflib.Graph\n@param inherited_state: the state inherited by the current state. 'None' if this is the top level state.\n@type inherited_state: L{state.ExecutionContext}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">inherited_state</span></span>)</span>"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie.state", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie.graph", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie.xmlns", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie.xmlns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie.CURIE_to_URI", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie.CURIE_to_URI", "kind": "function", "doc": "<p>CURIE to URI mapping. </p>\n\n<p>This method does I{not} take care of the last step of CURIE processing, ie, the fact that if\nit does not have a CURIE then the value is used a URI. This is done on the caller's side, because this has\nto be combined with base, for example. The method I{does} take care of BNode processing, though, ie,\nCURIE-s of the form \"_:XXX\".</p>\n\n<p>@param val: the full CURIE\n@type val: string\n@return: URIRef of a URI or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.termorcurie.TermOrCurie.term_to_URI", "modulename": "pyRdfa.termorcurie", "qualname": "TermOrCurie.term_to_URI", "kind": "function", "doc": "<p>A term to URI mapping, where term is a simple string and the corresponding\nURI is defined via the @vocab (ie, default term uri) mechanism. Returns None if term is not defined\n@param term: string\n@return: an RDFLib URIRef instance (or None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">term</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform", "modulename": "pyRdfa.transform", "kind": "module", "doc": "<p>Transformer sub-package for the pyRdfa package. It contains modules with transformer functions; each may be\ninvoked by pyRdfa to transform the dom tree before the \"real\" RDfa processing.</p>\n\n<p>@summary: RDFa Transformer package\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.transform.top_about", "modulename": "pyRdfa.transform", "qualname": "top_about", "kind": "function", "doc": "<p>@param root: a DOM node for the top level element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.empty_safe_curie", "modulename": "pyRdfa.transform", "qualname": "empty_safe_curie", "kind": "function", "doc": "<p>Remove the attributes whose value is an empty safe curie. It also adds an 'artificial' flag, ie, an\nattribute (called 'emptysc') into the node to signal that there _is_ an attribute with an ignored\nsafe curie value. The name of the attribute is 'about_pruned' or 'resource_pruned'.</p>\n\n<p>@param node: a DOM node for the top level element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.vocab_for_role", "modulename": "pyRdfa.transform", "qualname": "vocab_for_role", "kind": "function", "doc": "<p>The value of the @role attribute (defined separately in the U{Role Attribute Specification Lite<a href=\"http://www.w3.org/TR/role-attribute/#using-role-in-conjunction-with-rdfa\">http://www.w3.org/TR/role-attribute/#using-role-in-conjunction-with-rdfa</a>}) should be as if a @vocab value to the\nXHTML vocabulary was defined for it. This method turns all terms in role attributes into full URI-s, so that\nthis would not be an issue for the run-time.</p>\n\n<p>@param node: a DOM node for the top level element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.DublinCore", "modulename": "pyRdfa.transform.DublinCore", "kind": "module", "doc": "<p>Transfomer: handles the Dublin Core recommendation for XHTML for adding DC values. What this means is that:</p>\n\n<ul>\n<li>DC namespaces are defined via C{<link rel=\"schema.XX\" value=\"....\"/>}</li>\n<li>The 'XX.term' is used much like QNames in C{<link>} and C{<meta>} elements. For the latter, the namespaced names are added to a C{@property} attribute.</li>\n</ul>\n\n<p>This transformer adds \"real\" namespaces and changes the DC references in link and meta elements to abide to the\nRDFa namespace syntax.</p>\n\n<p>@summary: Dublin Core transformer\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org</p>\n"}, {"fullname": "pyRdfa.transform.DublinCore.DC_transform", "modulename": "pyRdfa.transform.DublinCore", "qualname": "DC_transform", "kind": "function", "doc": "<p>@param html: a DOM node for the top level html element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.OpenID", "modulename": "pyRdfa.transform.OpenID", "kind": "module", "doc": "<p>Simple transfomer: handle OpenID elements. Ie: an openid namespace is added and the usual\n'link' elements for openid are exchanged against a namespaced version.</p>\n\n<p>@summary: OpenID transformer module.\n@requires: U{RDFLib package<a href=\"http://rdflib.net\">http://rdflib.net</a>}\n@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org\n@var OPENID_NS: the OpenID URI used in the package</p>\n"}, {"fullname": "pyRdfa.transform.OpenID.OPENID_NS", "modulename": "pyRdfa.transform.OpenID", "qualname": "OPENID_NS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://xmlns.openid.net/auth#&#x27;"}, {"fullname": "pyRdfa.transform.OpenID.OpenID_transform", "modulename": "pyRdfa.transform.OpenID", "qualname": "OpenID_transform", "kind": "function", "doc": "<p>Replace C{openid.XXX} type C{@rel} attribute values in C{<link>} elements by C{openid:XXX}. The openid URI is also\nadded to the top level namespaces with the C{openid:} local name.</p>\n\n<p>@param html: a DOM node for the top level html element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.lite", "modulename": "pyRdfa.transform.lite", "kind": "module", "doc": "<p>@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org\n@version: $Id: lite.py,v 1.11 2013-09-26 16:37:54 ivan Exp $\n$Date: 2013-09-26 16:37:54 $</p>\n"}, {"fullname": "pyRdfa.transform.lite.non_lite_attributes", "modulename": "pyRdfa.transform.lite", "qualname": "non_lite_attributes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;about&#x27;, &#x27;inlist&#x27;, &#x27;datatype&#x27;, &#x27;rev&#x27;, &#x27;rel&#x27;, &#x27;content&#x27;]"}, {"fullname": "pyRdfa.transform.lite.non_lite_attributes_html", "modulename": "pyRdfa.transform.lite", "qualname": "non_lite_attributes_html", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;about&#x27;, &#x27;inlist&#x27;, &#x27;datatype&#x27;, &#x27;rev&#x27;]"}, {"fullname": "pyRdfa.transform.lite.lite_prune", "modulename": "pyRdfa.transform.lite", "qualname": "lite_prune", "kind": "function", "doc": "<p>This is a misnomer. The current version does not remove anything from the tree, just generates warnings as for the\nusage of non-lite attributes. A more aggressive version would mean to remove those attributes, but that would,\nin fact, define an RDFa Lite conformance level in the parser, which is against the WG decisions. So this should\nnot be done; the corresponding commands are commented in the code below...</p>\n\n<p>@param top: a DOM node for the top level element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">top</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.metaname", "modulename": "pyRdfa.transform.metaname", "kind": "module", "doc": "<p>Simple transfomer: C{meta} element is extended with a C{property} attribute, with a copy of the\nC{name} attribute values.</p>\n\n<p>@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org\n@version: $Id: metaname.py,v 1.3 2012-01-18 14:16:45 ivan Exp $\n$Date: 2012-01-18 14:16:45 $</p>\n"}, {"fullname": "pyRdfa.transform.metaname.meta_transform", "modulename": "pyRdfa.transform.metaname", "qualname": "meta_transform", "kind": "function", "doc": "<p>@param html: a DOM node for the top level html element\n@param options: invocation options\n@type options: L{Options<pyRdfa.options>}\n@param state: top level execution state\n@type state: L{State<pyRdfa.state>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.transform.prototype", "modulename": "pyRdfa.transform.prototype", "kind": "module", "doc": "<p>Encoding of the RDFa prototype vocabulary behavior. This means processing the graph by adding and removing triples\nbased on triples using the rdfa:Prototype and rdfa:ref class and property, respectively. For details, see the HTML5+RDFa document.</p>\n\n<p>@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n@contact: Ivan Herman, ivan@w3.org\n@version: $Id: prototype.py,v 1.1 2013-01-18 09:41:49 ivan Exp $\n$Date: 2013-01-18 09:41:49 $</p>\n"}, {"fullname": "pyRdfa.transform.prototype.Prototype", "modulename": "pyRdfa.transform.prototype", "qualname": "Prototype", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#Pattern&#x27;)"}, {"fullname": "pyRdfa.transform.prototype.pref", "modulename": "pyRdfa.transform.prototype", "qualname": "pref", "kind": "variable", "doc": "<p></p>\n", "default_value": "rdflib.term.URIRef(&#x27;http://www.w3.org/ns/rdfa#copy&#x27;)"}, {"fullname": "pyRdfa.transform.prototype.handle_prototypes", "modulename": "pyRdfa.transform.prototype", "qualname": "handle_prototypes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.utils", "modulename": "pyRdfa.utils", "kind": "module", "doc": "<p>Various utilities for pyRdfa.</p>\n\n<p>Most of the utilities are straightforward.</p>\n\n<p>@organization: U{World Wide Web Consortium<a href=\"http://www.w3.org\">http://www.w3.org</a>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}</p>\n"}, {"fullname": "pyRdfa.utils.URIOpener", "modulename": "pyRdfa.utils", "qualname": "URIOpener", "kind": "class", "doc": "<p>A wrapper around the urllib2 method to open a resource. Beyond accessing the data itself, the class\nsets a number of instance variable that might be relevant for processing.\nThe class also adds an accept header to the outgoing request, namely\ntext/html and application/xhtml+xml (unless set explicitly by the caller).</p>\n\n<p>If the content type is set by the server, the relevant HTTP response field is used. Otherwise,\ncommon suffixes are used (see L{host.preferred_suffixes}) to set the content type (this is really of importance\nfor C{file:///} URI-s). If none of these works, the content type is empty.</p>\n\n<p>Interpretation of the content type for the return is done by Deron Meranda's U{httpheader module<a href=\"http://deron.meranda.us/\">http://deron.meranda.us/</a>}.</p>\n\n<p>@ivar data: the real data, ie, a file-like object\n@ivar headers: the return headers as sent back by the server\n@ivar content_type: the content type of the resource or the empty string, if the content type cannot be determined\n@ivar location: the real location of the data (ie, after possible redirection and content negotiation)\n@ivar last_modified_date: sets the last modified date if set in the header, None otherwise\n@ivar expiration_date: sets the expiration date if set in the header, I{current UTC plus one day} otherwise (this is used for caching purposes, hence this artificial setting)</p>\n"}, {"fullname": "pyRdfa.utils.URIOpener.__init__", "modulename": "pyRdfa.utils", "qualname": "URIOpener.__init__", "kind": "function", "doc": "<p>@param name: URL to be opened\n@keyword additional_headers: additional HTTP request headers to be added to the call</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">additional_headers</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pyRdfa.utils.URIOpener.CONTENT_LOCATION", "modulename": "pyRdfa.utils", "qualname": "URIOpener.CONTENT_LOCATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Content-Location&#x27;"}, {"fullname": "pyRdfa.utils.URIOpener.CONTENT_TYPE", "modulename": "pyRdfa.utils", "qualname": "URIOpener.CONTENT_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Content-Type&#x27;"}, {"fullname": "pyRdfa.utils.URIOpener.LAST_MODIFIED", "modulename": "pyRdfa.utils", "qualname": "URIOpener.LAST_MODIFIED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Last-Modified&#x27;"}, {"fullname": "pyRdfa.utils.URIOpener.EXPIRES", "modulename": "pyRdfa.utils", "qualname": "URIOpener.EXPIRES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Expires&#x27;"}, {"fullname": "pyRdfa.utils.quote_URI", "modulename": "pyRdfa.utils", "qualname": "quote_URI", "kind": "function", "doc": "<p>'quote' a URI, ie, exchange special characters for their '%..' equivalents. Some of the characters\nmay stay as they are (listed in L{_unquotedChars}. If one of the characters listed in L{_warnChars} \nis also in the uri, an extra warning is also generated.\n@param uri: URI\n@param options: \n@type options: L{Options<pyRdfa.Options>}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uri</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.utils.create_file_name", "modulename": "pyRdfa.utils", "qualname": "create_file_name", "kind": "function", "doc": "<p>Create a suitable file name from an (absolute) URI. Used, eg, for the generation of a file name for a cached vocabulary file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uri</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.utils.has_one_of_attributes", "modulename": "pyRdfa.utils", "qualname": "has_one_of_attributes", "kind": "function", "doc": "<p>Check whether one of the listed attributes is present on a (DOM) node.\n@param node: DOM element node\n@param args: possible attribute names\n@return: True or False\n@rtype: Boolean</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.utils.traverse_tree", "modulename": "pyRdfa.utils", "qualname": "traverse_tree", "kind": "function", "doc": "<p>Traverse the whole element tree, and perform the function C{func} on all the elements.\n@param node: DOM element node\n@param func: function to be called on the node. Input parameter is a DOM Element Node. If the function returns a boolean True, the recursion is stopped.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.utils.return_XML", "modulename": "pyRdfa.utils", "qualname": "return_XML", "kind": "function", "doc": "<p>Get (recursively) the XML Literal content of a DOM Element Node. (Most of the processing is done\nvia a C{node.toxml} call of the xml minidom implementation.)</p>\n\n<p>@param inode: DOM Node\n@param state: L{pyRdfa.state.ExecutionContext}\n@param base: whether the base element should be added to the output\n@type base: Boolean\n@param xmlns: whether the namespace declarations should be repeated in the generated node\n@type xmlns: Boolean\n@return: string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">inode</span>, </span><span class=\"param\"><span class=\"n\">base</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">xmlns</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyRdfa.utils.dump", "modulename": "pyRdfa.utils", "qualname": "dump", "kind": "function", "doc": "<p>This is just for debug purposes: it prints the essential content of the node in the tree starting at node.</p>\n\n<p>@param node: DOM node</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();